{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TopbarPlus is a module enabling the construction of dynamic topbar icons. These icons can be enhanced with features and methods, like themes, dropdowns and menus, to expand upon their appearance and behaviour. TopbarPlus fully supports PC, Mobile, Tablet and Console, and comes with internal features such as 'overflows' to ensure icons remain within suitable bounds. Creating an icon is as simple as: -- Within a LocalScript in StarterPlayerScripts and assuming TopbarPlus is placed in ReplicatedStorage local Icon = require ( game : GetService ( \"ReplicatedStorage\" ). Icon ) local icon = Icon . new () Info The order icons appear are determined by their construction sequence. Icons constructed first will have a smaller order number, therefore will appear left of icons with a higher order. For instance, if you construct a shop icon then an inventory icon, the shop icon will appear furthest left. You can modify this behaviour using icon:setOrder . This constructs an empty 32x32 icon on the topbar. To add an image and label, do: icon : setImage ( imageId ) icon : setLabel ( \"Label\" ) These methods are 'chainable' therefore can alternatively be called by doing: local icon = Icon . new () : setImage ( imageId ) : setLabel ( \"Label\" ) Info Chainable methods have a chainable tag next to their name within the API Icon docs. Sometimes you'll want an item to appear only when deselected , and similarily only when selected . You can achieve this by specifying a string value within the iconState parameter of methods containing the toggleable tag. These are: \"deselected\" -- Applies the value when the icon is deselected (i.e. not pressed) \"selected\" -- Applies the value when the icon is selected (i.e. pressed) \"hovering\" -- Applies the value when a cursor, finger or controller is hovering over the icon If no argument is specified, the value will be applied to both deselected and selected states. For example: Icon . new () : setImage ( 4882429582 ) : setLabel ( \"Closed\" , \"deselected\" ) : setLabel ( \"Open\" , \"selected\" ) : setLabel ( \"Hovering\" , \"hovering\" ) You may wish to enhance icons further with features like themes, dropdowns and menus, or by binding GuiObjects and KeyCodes to their toggle. This and much more can be achieved by exploring the Feature Guide and Icon API . Warning It's important you set IconController.voiceChatEnabled to true if VoiceChat is enabled within your experience so that the BETA label can be accounted for.","title":"Introduction"},{"location":"changelog/","text":"[2.9.0] - October 6th 2022 \u00b6 Added \u00b6 Added icon:debounce(seconds) . This is shorthand for icon:lock() task.wait(seconds) icon:unlock() Added IconController.disableControllerOption(bool) Added controller selection support Improved \u00b6 Improved the scrolling behaviour of menus and dropdowns (scrolling is no longer blocked by other scrolling items) Improved menu and dropdown selection when using a controller so that menu/dropdown icons are no longer skipped when the maxIconsBeforeScroll is less than the total icons within the feature Updated internals of localization support so that only the source language is scraped [2.8.0] - September 29 2022 \u00b6 Added \u00b6 Added Localization compatability. Icons will now update their properties (such as width) when new localized text is found or detected. This also accounts for switching languages live in-game. This resolves #38 Added RichText compatability to Captions and Tips Added IconController.voiceChatEnabled (default false ) which now must be set to true by game developers if their experience uses VoiceChat This is also accompanied by a warning to inform developers of this. This resolves the issue outlined here: https://devforum.roblox.com/t/topbarplus-v277/1017485/681?u=foreverhd Added icon:autoDeselect(bool) as a shorthand alternative to :setProperty(\"deselectWhenOtherIconSelected\", bool) Added icon:call(func) as a more appropriate alternative to icon:give(object) Added icon:setXSize(XOffset, iconState) Added icon:setYSize(YOffset, iconState) Added forcedIconSizeX and forcedIconSizeY theme settings Added icon.userSelected event Added icon.userDeselected event Added icon.userToggled event Added a variable for script and script.Parent to Icon and IconController. This resolves #47 Improved \u00b6 Updated Contributing docs page to mention that you don't need to open issues for smaller contributions like single-line fixes Improved the internal behaviour of :setSize Improved the behaviour of :lock so that the overlaps now disappear and so that :select and :deselect can still work (now only the user-input is disabled). This resolves #42 Fixed \u00b6 Fixed an offset bug that occurred when CoreGuis PlayerList and Backpack were disabled (but not EmotesMenu) while R6. More details here: https://devforum.roblox.com/t/topbarplus-v277/1017485/684?u=foreverhd Fixed an error when setting the base ZIndex of an icon. More details here: https://devforum.roblox.com/t/topbarplus-v277/1017485/679?u=foreverhd Fixed a bug preventing dropdown icons from updating: This resolves #32 and https://devforum.roblox.com/t/topbarplus-v277/1017485/348?u=foreverhd Fixed a font-clipping issue by using ContentText instead and updating the icon whenever its font is changed. This resolves #60 and resolves #54 Fixed a bug which caused the Playerlist to re-appear when toggling right-set dropdowns even if the Playerlist CoreGui was previously disabled. This resolves #57 Removed \u00b6 Removed the documentation within Icon and IconController, and removed the module-docs.yml action. This was not as beneficial as first assumed. Removed forcedIconSize theme setting [2.7.7] - September 26 2022 \u00b6 Added \u00b6 Added basic compatability for VR devices. This includes different behaviour for when the Roblox menu is toggled. Credit to @cl1ents for help with this. Improved \u00b6 Improved RichText compatability so that icons now account for the ContentText instead of Text when determining width. Updated the third-party documents page which now explains that third-party applications no-longer need to do anything. TopbarPlus now handles multi-package logic internally. Fixed \u00b6 Fixed some third-party require logic within Icon and IconController. If more than one TopbarPlus package is required within an experience the first-required package will become the 'lead' package. No other package will run afterwards, only a reference to the lead package is returned. This prevents two-packages from running at once (such as when using HD Admin, SuperBiz Catalog, etc which also have their own TopbarPlus package). Fixed additional third-party require logic that would occur when the IconController was required before the Icon. [2.7.6] - May 24 2022 \u00b6 Added \u00b6 Checks to account for the new obtrusive 'Voice Chat Beta' icon. Mouse-click detection for controller mode hide/show toggle. Credit to @Lucke0051 for this. Fixed \u00b6 A bug with overflows caused by changing the Workspace.CurrentCamera. Credit to @Lucke0051 for this. [2.7.5] - August 17 2021 \u00b6 Improved \u00b6 The roblox hover cursor now appears when hovering over Icon buttons. [2.7.4] - August 9 2021 \u00b6 Fixed \u00b6 A bug with ResetOnRespawn where the :give() function would call right away and when destroyed for functions, which only triggered after two resets Items like captions and tips not being destroyed when active with ResetOnSpawn. Improved \u00b6 The fake healthbar behaviour, so that it appears now only when an icon is set to the right. Reduced the likelihood of two healthbars appearing simultaneously. [2.7.3] - August 6 2021 \u00b6 Added \u00b6 A dynamic healthbar to replace the static core healthbar which appears to the right of the screen when the localPlayer is damaged. IconController.disableHealthbar(bool) Fixed \u00b6 The updating of menu and dropdown canvases when a icon is resized within them. [2.7.2] - July 12 2021 \u00b6 Fixed \u00b6 Flickering icon bug when an expanding hover effect triggered the overflow then immediately snapped back. [2.7.1] - May 29 2021 \u00b6 Added \u00b6 IconController.mimicCoreGui , default is true . Set to false to have the topbar persist even when game:GetService(\"StarterGui\"):SetCore(\"TopbarEnabled\", false) is called. IconController.setLeftOffset(number) , defaults to 0. IconController.setRightOffset(number) , defaults to 0. Fixed \u00b6 A bug which caused IconController.setGap to update incorrectly. [2.6.1] - May 21 2021 \u00b6 Added \u00b6 Compatibility for Deferred Events. Fixed \u00b6 The setting of captions and tips to nil . [2.5.2] - May 10 2021 \u00b6 Fixed \u00b6 The clipping of some letters within the iconLabel. [2.5.1] - May 7 2021 \u00b6 Added \u00b6 Icon:convertLabelToNumberSpinner(numberSpinner) - see the API for details and example usage . Improved \u00b6 Internals to support the new convertLabelToNumberSpinner method. [2.4.1] - May 4 2021 \u00b6 Added \u00b6 hovering icon state (see https://1foreverhd.github.io/TopbarPlus/ for more info), e.g. icon:setLabel(\"Nanoblox\", \"hovering\") repositionInfo action theme property Icon:give(userdata) Changed \u00b6 toggleState to iconState for toggleable methods resizeTransitionInfo to resizeInfo Improved \u00b6 The internal orgnisation and writing of captions and tips Playground examples The BlueGradient theme with bounces API and Introduction documentation Fixed \u00b6 A minor overflow appearance bug Appearance bugs with tips and captions [2.3.3] - April 27 2021 \u00b6 Added \u00b6 resizeTransitionInfo action theme property Fixed \u00b6 Error checking for ChatMain [2.3.2] - April 24 2021 \u00b6 Fixed \u00b6 A bug where the topbar was not always updated when an icon was constructed [2.3.1] - March 16 2021 \u00b6 Added \u00b6 icon.lockedSettings - this is used internally to prevent overflow properties being accidentally overwritten Fixed \u00b6 A critical bug with overflows that caused icons to disappear [2.3.0] - February 14 2021 \u00b6 Added \u00b6 icon:setProperty(propertName, value) - this will enable properties to be set within chained methods [2.2.1] - February 13 2021 \u00b6 Fixed \u00b6 An overlapping icon bug caused by yielding after requiring the Icon module [2.2.0] - February 12 2021 \u00b6 Added \u00b6 IconController.clearIconOnSpawn(icon) Improved \u00b6 The cleanup process when icon:destroy() is called [2.1.0] - February 2 2021 \u00b6 Added \u00b6 icon:bindEvent(iconEventName, eventFunction) icon:unbindEvent(iconEventName) [2.0.0] - January 19 2021 \u00b6 Added \u00b6 Menus (dropdowns but horizontal and with scrolling support!) Dropdowns v2 Labels v2 Tips v2 Captions v2 Corners v2 Chainable methods Automatic overflows when left-set or right-set icons exceed the boundary of the: Viewport Closest enabled opposite-aligned icon Closest enabled center-aligned icon The ability to set changes for specific toggle states (instead of automatically both), e.g. icon:setLabel(\"Off\", \"deselected\") and icon:setLabel(\"On\", \"selected\") Rich Text support Icon.mimic(coreIconToMimic) constructor to replace functions like IconController.createFakeChat icon:Destroy() uppercase alias to assist developers who utilise PascalCase tools such as Maids Referencing support for third parties, see Third Parties icon:set(settingName, value) icon:get(settingName, value) icon:clearNotices() icon:setMenu(arrayOfIcons) icon:bindToggleItem(guiObjectOrLayerCollector) icon:unbindToggleItem(guiObjectOrLayerCollector) icon:bindToggleKey(keyCodeEnum) icon:unbindToggleKey(keyCodeEnum) icon:lock() icon:unlock() icon:setTopPadding(offset, scale) icon:setCornerRadius(scale, offset, toggleState) icon:setImageYScale(yScale, toggleState) icon:setImageRatio(ratio, toggleState) icon:setSize(XOffset, YOffset, toggleState) icon:join(parentIcon, featureName) icon:leave() icon.notified event icon.hoverStarted event icon.hoverEnded event icon.dropdownOpened event icon.dropdownClosed event icon.menuOpened event icon.menuClosed event IconController.setGap(offset, specificAlignment) Many new properties Improved \u00b6 The internals and externals of themes to make then significantly easier to customise and apply Console support Mobile support (particularly for features like tips and captions) The behaviour of features like tips and captions Notices (now fully compatible with menus, dropdowns, etc) Changed \u00b6 Icon.new(name, imageId, order, label) to Icon.new() - this is to encourage users to utilise the equivalent methods instead which provide greater flexibility Frustrating require() dependencies to static modules Icon to be the parent module with others as descendants All IconController functions now use . instead of the incorrect : Icon orders to be determined now by their construction sequence (instead of randomly), with the option to modify this with icon:setOrder icon:setLabel(text) to icon:setLabel(text, toggleState) icon:setImage(imageId) to icon:setImage(imageId, toggleState) icon:setOrder(orderNumber) to icon:setOrder(orderNumber, toggleState) icon:setLeft() to icon:setLeft(toggleState) icon:setMid() to icon:setMid(toggleState) icon:setRight() to icon:setRight(toggleState) icon:setBaseZIndex(zindex) to icon:setBaseZIndex(zindex, toggleState) icon.objects to icon.instances The names of almost all instances to be more obvious and accurate Removed \u00b6 FakeChat support - internal changes to the Roblox Core API now make it impossible to accurately mimic their core chat icon icon:setToggleFunction (use selected/deselected events instead) icon:setHoverFunction (use hoverStarted/Ended events instead) icon:createDropdown (replaced with icon:setDropdown ) icon:removeDropdown icon:setImageSize (replaced with icon:setImageRatio and icon:setImageYScale ) icon:setCellSize (replaced with icon:setSize ) icon:setToggleMenu (replaced with icon:bindToggleItem ) icon:clearNotifications (replaced with icon:clearNotices ) icon:applyThemeToObject icon:applyThemeToAllObjects icon.endNotifications event IconController:getAllIcons (replaced with IconController.getIcons ) Some properties may have been removed too Fixed \u00b6 Console-mode rapid enabling and disabling bug Recursive update topbar bug","title":"Changelog"},{"location":"changelog/#290-october-6th-2022","text":"","title":"[2.9.0] - October 6th 2022"},{"location":"changelog/#added","text":"Added icon:debounce(seconds) . This is shorthand for icon:lock() task.wait(seconds) icon:unlock() Added IconController.disableControllerOption(bool) Added controller selection support","title":"Added"},{"location":"changelog/#improved","text":"Improved the scrolling behaviour of menus and dropdowns (scrolling is no longer blocked by other scrolling items) Improved menu and dropdown selection when using a controller so that menu/dropdown icons are no longer skipped when the maxIconsBeforeScroll is less than the total icons within the feature Updated internals of localization support so that only the source language is scraped","title":"Improved"},{"location":"changelog/#280-september-29-2022","text":"","title":"[2.8.0] - September 29 2022"},{"location":"changelog/#added_1","text":"Added Localization compatability. Icons will now update their properties (such as width) when new localized text is found or detected. This also accounts for switching languages live in-game. This resolves #38 Added RichText compatability to Captions and Tips Added IconController.voiceChatEnabled (default false ) which now must be set to true by game developers if their experience uses VoiceChat This is also accompanied by a warning to inform developers of this. This resolves the issue outlined here: https://devforum.roblox.com/t/topbarplus-v277/1017485/681?u=foreverhd Added icon:autoDeselect(bool) as a shorthand alternative to :setProperty(\"deselectWhenOtherIconSelected\", bool) Added icon:call(func) as a more appropriate alternative to icon:give(object) Added icon:setXSize(XOffset, iconState) Added icon:setYSize(YOffset, iconState) Added forcedIconSizeX and forcedIconSizeY theme settings Added icon.userSelected event Added icon.userDeselected event Added icon.userToggled event Added a variable for script and script.Parent to Icon and IconController. This resolves #47","title":"Added"},{"location":"changelog/#improved_1","text":"Updated Contributing docs page to mention that you don't need to open issues for smaller contributions like single-line fixes Improved the internal behaviour of :setSize Improved the behaviour of :lock so that the overlaps now disappear and so that :select and :deselect can still work (now only the user-input is disabled). This resolves #42","title":"Improved"},{"location":"changelog/#fixed","text":"Fixed an offset bug that occurred when CoreGuis PlayerList and Backpack were disabled (but not EmotesMenu) while R6. More details here: https://devforum.roblox.com/t/topbarplus-v277/1017485/684?u=foreverhd Fixed an error when setting the base ZIndex of an icon. More details here: https://devforum.roblox.com/t/topbarplus-v277/1017485/679?u=foreverhd Fixed a bug preventing dropdown icons from updating: This resolves #32 and https://devforum.roblox.com/t/topbarplus-v277/1017485/348?u=foreverhd Fixed a font-clipping issue by using ContentText instead and updating the icon whenever its font is changed. This resolves #60 and resolves #54 Fixed a bug which caused the Playerlist to re-appear when toggling right-set dropdowns even if the Playerlist CoreGui was previously disabled. This resolves #57","title":"Fixed"},{"location":"changelog/#removed","text":"Removed the documentation within Icon and IconController, and removed the module-docs.yml action. This was not as beneficial as first assumed. Removed forcedIconSize theme setting","title":"Removed"},{"location":"changelog/#277-september-26-2022","text":"","title":"[2.7.7] - September 26 2022"},{"location":"changelog/#added_2","text":"Added basic compatability for VR devices. This includes different behaviour for when the Roblox menu is toggled. Credit to @cl1ents for help with this.","title":"Added"},{"location":"changelog/#improved_2","text":"Improved RichText compatability so that icons now account for the ContentText instead of Text when determining width. Updated the third-party documents page which now explains that third-party applications no-longer need to do anything. TopbarPlus now handles multi-package logic internally.","title":"Improved"},{"location":"changelog/#fixed_1","text":"Fixed some third-party require logic within Icon and IconController. If more than one TopbarPlus package is required within an experience the first-required package will become the 'lead' package. No other package will run afterwards, only a reference to the lead package is returned. This prevents two-packages from running at once (such as when using HD Admin, SuperBiz Catalog, etc which also have their own TopbarPlus package). Fixed additional third-party require logic that would occur when the IconController was required before the Icon.","title":"Fixed"},{"location":"changelog/#276-may-24-2022","text":"","title":"[2.7.6] - May 24 2022"},{"location":"changelog/#added_3","text":"Checks to account for the new obtrusive 'Voice Chat Beta' icon. Mouse-click detection for controller mode hide/show toggle. Credit to @Lucke0051 for this.","title":"Added"},{"location":"changelog/#fixed_2","text":"A bug with overflows caused by changing the Workspace.CurrentCamera. Credit to @Lucke0051 for this.","title":"Fixed"},{"location":"changelog/#275-august-17-2021","text":"","title":"[2.7.5] - August 17 2021"},{"location":"changelog/#improved_3","text":"The roblox hover cursor now appears when hovering over Icon buttons.","title":"Improved"},{"location":"changelog/#274-august-9-2021","text":"","title":"[2.7.4] - August 9 2021"},{"location":"changelog/#fixed_3","text":"A bug with ResetOnRespawn where the :give() function would call right away and when destroyed for functions, which only triggered after two resets Items like captions and tips not being destroyed when active with ResetOnSpawn.","title":"Fixed"},{"location":"changelog/#improved_4","text":"The fake healthbar behaviour, so that it appears now only when an icon is set to the right. Reduced the likelihood of two healthbars appearing simultaneously.","title":"Improved"},{"location":"changelog/#273-august-6-2021","text":"","title":"[2.7.3] - August 6 2021"},{"location":"changelog/#added_4","text":"A dynamic healthbar to replace the static core healthbar which appears to the right of the screen when the localPlayer is damaged. IconController.disableHealthbar(bool)","title":"Added"},{"location":"changelog/#fixed_4","text":"The updating of menu and dropdown canvases when a icon is resized within them.","title":"Fixed"},{"location":"changelog/#272-july-12-2021","text":"","title":"[2.7.2] - July 12 2021"},{"location":"changelog/#fixed_5","text":"Flickering icon bug when an expanding hover effect triggered the overflow then immediately snapped back.","title":"Fixed"},{"location":"changelog/#271-may-29-2021","text":"","title":"[2.7.1] - May 29 2021"},{"location":"changelog/#added_5","text":"IconController.mimicCoreGui , default is true . Set to false to have the topbar persist even when game:GetService(\"StarterGui\"):SetCore(\"TopbarEnabled\", false) is called. IconController.setLeftOffset(number) , defaults to 0. IconController.setRightOffset(number) , defaults to 0.","title":"Added"},{"location":"changelog/#fixed_6","text":"A bug which caused IconController.setGap to update incorrectly.","title":"Fixed"},{"location":"changelog/#261-may-21-2021","text":"","title":"[2.6.1] - May 21 2021"},{"location":"changelog/#added_6","text":"Compatibility for Deferred Events.","title":"Added"},{"location":"changelog/#fixed_7","text":"The setting of captions and tips to nil .","title":"Fixed"},{"location":"changelog/#252-may-10-2021","text":"","title":"[2.5.2] - May 10 2021"},{"location":"changelog/#fixed_8","text":"The clipping of some letters within the iconLabel.","title":"Fixed"},{"location":"changelog/#251-may-7-2021","text":"","title":"[2.5.1] - May 7 2021"},{"location":"changelog/#added_7","text":"Icon:convertLabelToNumberSpinner(numberSpinner) - see the API for details and example usage .","title":"Added"},{"location":"changelog/#improved_5","text":"Internals to support the new convertLabelToNumberSpinner method.","title":"Improved"},{"location":"changelog/#241-may-4-2021","text":"","title":"[2.4.1] - May 4 2021"},{"location":"changelog/#added_8","text":"hovering icon state (see https://1foreverhd.github.io/TopbarPlus/ for more info), e.g. icon:setLabel(\"Nanoblox\", \"hovering\") repositionInfo action theme property Icon:give(userdata)","title":"Added"},{"location":"changelog/#changed","text":"toggleState to iconState for toggleable methods resizeTransitionInfo to resizeInfo","title":"Changed"},{"location":"changelog/#improved_6","text":"The internal orgnisation and writing of captions and tips Playground examples The BlueGradient theme with bounces API and Introduction documentation","title":"Improved"},{"location":"changelog/#fixed_9","text":"A minor overflow appearance bug Appearance bugs with tips and captions","title":"Fixed"},{"location":"changelog/#233-april-27-2021","text":"","title":"[2.3.3] - April 27 2021"},{"location":"changelog/#added_9","text":"resizeTransitionInfo action theme property","title":"Added"},{"location":"changelog/#fixed_10","text":"Error checking for ChatMain","title":"Fixed"},{"location":"changelog/#232-april-24-2021","text":"","title":"[2.3.2] - April 24 2021"},{"location":"changelog/#fixed_11","text":"A bug where the topbar was not always updated when an icon was constructed","title":"Fixed"},{"location":"changelog/#231-march-16-2021","text":"","title":"[2.3.1] - March 16 2021"},{"location":"changelog/#added_10","text":"icon.lockedSettings - this is used internally to prevent overflow properties being accidentally overwritten","title":"Added"},{"location":"changelog/#fixed_12","text":"A critical bug with overflows that caused icons to disappear","title":"Fixed"},{"location":"changelog/#230-february-14-2021","text":"","title":"[2.3.0] - February 14 2021"},{"location":"changelog/#added_11","text":"icon:setProperty(propertName, value) - this will enable properties to be set within chained methods","title":"Added"},{"location":"changelog/#221-february-13-2021","text":"","title":"[2.2.1] - February 13 2021"},{"location":"changelog/#fixed_13","text":"An overlapping icon bug caused by yielding after requiring the Icon module","title":"Fixed"},{"location":"changelog/#220-february-12-2021","text":"","title":"[2.2.0] - February 12 2021"},{"location":"changelog/#added_12","text":"IconController.clearIconOnSpawn(icon)","title":"Added"},{"location":"changelog/#improved_7","text":"The cleanup process when icon:destroy() is called","title":"Improved"},{"location":"changelog/#210-february-2-2021","text":"","title":"[2.1.0] - February 2 2021"},{"location":"changelog/#added_13","text":"icon:bindEvent(iconEventName, eventFunction) icon:unbindEvent(iconEventName)","title":"Added"},{"location":"changelog/#200-january-19-2021","text":"","title":"[2.0.0] - January 19 2021"},{"location":"changelog/#added_14","text":"Menus (dropdowns but horizontal and with scrolling support!) Dropdowns v2 Labels v2 Tips v2 Captions v2 Corners v2 Chainable methods Automatic overflows when left-set or right-set icons exceed the boundary of the: Viewport Closest enabled opposite-aligned icon Closest enabled center-aligned icon The ability to set changes for specific toggle states (instead of automatically both), e.g. icon:setLabel(\"Off\", \"deselected\") and icon:setLabel(\"On\", \"selected\") Rich Text support Icon.mimic(coreIconToMimic) constructor to replace functions like IconController.createFakeChat icon:Destroy() uppercase alias to assist developers who utilise PascalCase tools such as Maids Referencing support for third parties, see Third Parties icon:set(settingName, value) icon:get(settingName, value) icon:clearNotices() icon:setMenu(arrayOfIcons) icon:bindToggleItem(guiObjectOrLayerCollector) icon:unbindToggleItem(guiObjectOrLayerCollector) icon:bindToggleKey(keyCodeEnum) icon:unbindToggleKey(keyCodeEnum) icon:lock() icon:unlock() icon:setTopPadding(offset, scale) icon:setCornerRadius(scale, offset, toggleState) icon:setImageYScale(yScale, toggleState) icon:setImageRatio(ratio, toggleState) icon:setSize(XOffset, YOffset, toggleState) icon:join(parentIcon, featureName) icon:leave() icon.notified event icon.hoverStarted event icon.hoverEnded event icon.dropdownOpened event icon.dropdownClosed event icon.menuOpened event icon.menuClosed event IconController.setGap(offset, specificAlignment) Many new properties","title":"Added"},{"location":"changelog/#improved_8","text":"The internals and externals of themes to make then significantly easier to customise and apply Console support Mobile support (particularly for features like tips and captions) The behaviour of features like tips and captions Notices (now fully compatible with menus, dropdowns, etc)","title":"Improved"},{"location":"changelog/#changed_1","text":"Icon.new(name, imageId, order, label) to Icon.new() - this is to encourage users to utilise the equivalent methods instead which provide greater flexibility Frustrating require() dependencies to static modules Icon to be the parent module with others as descendants All IconController functions now use . instead of the incorrect : Icon orders to be determined now by their construction sequence (instead of randomly), with the option to modify this with icon:setOrder icon:setLabel(text) to icon:setLabel(text, toggleState) icon:setImage(imageId) to icon:setImage(imageId, toggleState) icon:setOrder(orderNumber) to icon:setOrder(orderNumber, toggleState) icon:setLeft() to icon:setLeft(toggleState) icon:setMid() to icon:setMid(toggleState) icon:setRight() to icon:setRight(toggleState) icon:setBaseZIndex(zindex) to icon:setBaseZIndex(zindex, toggleState) icon.objects to icon.instances The names of almost all instances to be more obvious and accurate","title":"Changed"},{"location":"changelog/#removed_1","text":"FakeChat support - internal changes to the Roblox Core API now make it impossible to accurately mimic their core chat icon icon:setToggleFunction (use selected/deselected events instead) icon:setHoverFunction (use hoverStarted/Ended events instead) icon:createDropdown (replaced with icon:setDropdown ) icon:removeDropdown icon:setImageSize (replaced with icon:setImageRatio and icon:setImageYScale ) icon:setCellSize (replaced with icon:setSize ) icon:setToggleMenu (replaced with icon:bindToggleItem ) icon:clearNotifications (replaced with icon:clearNotices ) icon:applyThemeToObject icon:applyThemeToAllObjects icon.endNotifications event IconController:getAllIcons (replaced with IconController.getIcons ) Some properties may have been removed too","title":"Removed"},{"location":"changelog/#fixed_14","text":"Console-mode rapid enabling and disabling bug Recursive update topbar bug","title":"Fixed"},{"location":"contributing/","text":"Bug Reports \u00b6 To submit a bug report, open an issue or create a response at the discussion thread . Ensure your report includes a detailed explanation of the problem with any relavent images, videos, etc (such as console errors). Aim to include a link to a stipped-down uncopylocked Roblox place which reproduces the bug. Questions and Feedback \u00b6 Be sure to check out the documentation and resources first before asking a question. We recommend asking all questions and posting feedback to the discussion thread . Submitting a resource (video tutorial, port, etc) \u00b6 Fancy making a tutorial or resource for TopbarPlus? Feel free to get in touch and we can provide tips, best practices, etc. We'll feature approved resources on the resources page and often the discussion thread . To submit a resource, open an issue , or reach out on the discussion thread or to ForeverHD on the devforum . Suggestions and Code \u00b6 TopbarPlus is completely free and open source; any suggestions and code contributions are greatly appreciated! To make a suggestion, open an issue or create a response at the discussion thread . For large contributions (like a new feature) please open an issue before beginning a code contribution to ensure it's discussed through fully (we wouldn't want to waste your time!). For smaller contributions (a few lines of code, fixing typos, etc) feel free to send a pull request right away. Make sure to merge your pull requests into the #development branch. Some tools you'll find useful when working on this project: Rojo Material for MKDocs Roblox LSP Documentation \u00b6 If you find any problems in the documentation, including typos, bad grammar, misleading phrasing, or missing content, feel free to file issues and pull requests to fix them. To test documentation: Install Python (which comes with pip). Install Material for MKDocs . Visit the TopbarPlus repository . Click Fork in the top right corner. Clone this fork into your local repository. Change directory to this clone cd TopbarPlus . Swap to the development branch git checkout development . Call mkdocs serve within your terminal. Open your local website (it will look something like http://0.0.0.0:8000 ) Any changes to mkdocs.yml or the files within docs will now update live to this local site. Important All pull requests must be made to the development branch.","title":"Contributing"},{"location":"contributing/#bug-reports","text":"To submit a bug report, open an issue or create a response at the discussion thread . Ensure your report includes a detailed explanation of the problem with any relavent images, videos, etc (such as console errors). Aim to include a link to a stipped-down uncopylocked Roblox place which reproduces the bug.","title":"Bug Reports"},{"location":"contributing/#questions-and-feedback","text":"Be sure to check out the documentation and resources first before asking a question. We recommend asking all questions and posting feedback to the discussion thread .","title":"Questions and Feedback"},{"location":"contributing/#submitting-a-resource-video-tutorial-port-etc","text":"Fancy making a tutorial or resource for TopbarPlus? Feel free to get in touch and we can provide tips, best practices, etc. We'll feature approved resources on the resources page and often the discussion thread . To submit a resource, open an issue , or reach out on the discussion thread or to ForeverHD on the devforum .","title":"Submitting a resource (video tutorial, port, etc)"},{"location":"contributing/#suggestions-and-code","text":"TopbarPlus is completely free and open source; any suggestions and code contributions are greatly appreciated! To make a suggestion, open an issue or create a response at the discussion thread . For large contributions (like a new feature) please open an issue before beginning a code contribution to ensure it's discussed through fully (we wouldn't want to waste your time!). For smaller contributions (a few lines of code, fixing typos, etc) feel free to send a pull request right away. Make sure to merge your pull requests into the #development branch. Some tools you'll find useful when working on this project: Rojo Material for MKDocs Roblox LSP","title":"Suggestions and Code"},{"location":"contributing/#documentation","text":"If you find any problems in the documentation, including typos, bad grammar, misleading phrasing, or missing content, feel free to file issues and pull requests to fix them. To test documentation: Install Python (which comes with pip). Install Material for MKDocs . Visit the TopbarPlus repository . Click Fork in the top right corner. Clone this fork into your local repository. Change directory to this clone cd TopbarPlus . Swap to the development branch git checkout development . Call mkdocs serve within your terminal. Open your local website (it will look something like http://0.0.0.0:8000 ) Any changes to mkdocs.yml or the files within docs will now update live to this local site. Important All pull requests must be made to the development branch.","title":"Documentation"},{"location":"features/","text":"Images \u00b6 icon : setImage ( shopImageId ) Labels \u00b6 icon : setLabel ( \"Shop\" ) icon : setImage ( shopImageId ) icon : setLabel ( \"Shop\" ) Notices \u00b6 icon : notify () Themes \u00b6 Themes are configurable tables of information that can be applied to icons to enhance their appearance and behaviour. When constructed, an icon will automatically apply the 'Default' theme. To expand upon this, you can create your own theme modules under Icon -> Themes ) then apply these to your desired icons. The Default theme and all theme settings can be found here . Themes can be applied in two ways: To all icons and future icons at once: local Themes = require ( game : GetService ( \"ReplicatedStorage\" ). Icon . Themes ) IconController . setGameTheme ( Themes . YourThemeName ) Individually to an icon: local Themes = require ( game : GetService ( \"ReplicatedStorage\" ). Icon . Themes ) icon : setTheme ( Themes . YourThemeName ) In this example, we'll apply the BlueGradient theme which automatically comes with TopbarPlus: local iconModule = game : GetService ( \"ReplicatedStorage\" ). Icon local IconController = require ( iconModule . IconController ) local Themes = require ( iconModule . Themes ) IconController . setGameTheme ( Themes [ \"BlueGradient\" ]) Deselected Selected Dropdowns \u00b6 Dropdowns are vertical navigation frames that contain an array of icons: icon : set ( \"dropdownSquareCorners\" , true ) icon : setDropdown ({ Icon . new () : setLabel ( \"Category 1\" ) , Icon . new () : setLabel ( \"Category 2\" ) , Icon . new () : setLabel ( \"Category 3\" ) , Icon . new () : setLabel ( \"Category 4\" ) : setName ( \"CategoryFourIcon\" ) : bindEvent ( \"selected\" , function ( self ) print (( \"%s was selected!\" ): format ( self . name )) end ) : bindEvent ( \"deselected\" , function ( self ) print (( \"%s was deselected!\" ): format ( self . name )) end ) , }) Menus \u00b6 Menus are horizontal navigation frames that contain an array of icons: icon : set ( \"menuMaxIconsBeforeScroll\" , 2 ) icon : setMenu ({ Icon . new () : setLabel ( \"Category 1\" ) , Icon . new () : setLabel ( \"Category 2\" ) , Icon . new () : setLabel ( \"Category 3\" ) , Icon . new () : setLabel ( \"Category 4\" ) : setName ( \"CategoryFourIcon\" ) : bindEvent ( \"selected\" , function ( self ) print (( \"%s was selected!\" ): format ( self . name )) end ) : bindEvent ( \"deselected\" , function ( self ) print (( \"%s was deselected!\" ): format ( self . name )) end ) , }) Captions \u00b6 icon : setCaption ( \"Shop Caption\" ) Tips \u00b6 icon : setTip ( \"Open Shop (v)\" ) Toggle Items \u00b6 Binds a GuiObject (such as a frame) to appear or disappear when the icon is toggled icon : bindToggleItem ( shopFrame ) It is equivalent to doing: icon . deselected : Connect ( function () shopFrame . Visible = false end ) icon . selected : Connect ( function () shopFrame . Visible = true end ) Toggle Keys \u00b6 Binds a keycode which toggles the icon when pressed. -- When the 'v' key is pressed, the shop icon will open -- When pressed again it will close icon : bindToggleKey ( Enum . KeyCode . V ) Corners \u00b6 icon : setCornerRadius ( 0 , 0 ) icon : setCornerRadius ( 0 , 8 ) icon : setCornerRadius ( 1 , 0 ) Alignments \u00b6 -- Aligns the icon to the left of the screen (next to chat if present) -- This is the default behaviour icon : setLeft () -- Aligns the icon in the middle of the screen icon : setMid () -- Aligns the icon to the right of the screen (next to (...) if present) icon : setRight () Console Support \u00b6 Overflows \u00b6 When accounting for many device types and screen sizes, icons may occasionally, particularly for smaller devices like phones, overlap with other icons or the bounds of the screen. TopbarPlus solves this problem with automatic overflows which prevent overlaps occuring. An overflow will appear when left-set or right-set icons exceed the boundary of the: Viewport Closest enabled opposite-aligned icon Closest enabled center-aligned icon These examples and more can be tested, viewed and edited at the Playground .","title":"Features"},{"location":"features/#images","text":"icon : setImage ( shopImageId )","title":"Images"},{"location":"features/#labels","text":"icon : setLabel ( \"Shop\" ) icon : setImage ( shopImageId ) icon : setLabel ( \"Shop\" )","title":"Labels"},{"location":"features/#notices","text":"icon : notify ()","title":"Notices"},{"location":"features/#themes","text":"Themes are configurable tables of information that can be applied to icons to enhance their appearance and behaviour. When constructed, an icon will automatically apply the 'Default' theme. To expand upon this, you can create your own theme modules under Icon -> Themes ) then apply these to your desired icons. The Default theme and all theme settings can be found here . Themes can be applied in two ways: To all icons and future icons at once: local Themes = require ( game : GetService ( \"ReplicatedStorage\" ). Icon . Themes ) IconController . setGameTheme ( Themes . YourThemeName ) Individually to an icon: local Themes = require ( game : GetService ( \"ReplicatedStorage\" ). Icon . Themes ) icon : setTheme ( Themes . YourThemeName ) In this example, we'll apply the BlueGradient theme which automatically comes with TopbarPlus: local iconModule = game : GetService ( \"ReplicatedStorage\" ). Icon local IconController = require ( iconModule . IconController ) local Themes = require ( iconModule . Themes ) IconController . setGameTheme ( Themes [ \"BlueGradient\" ]) Deselected Selected","title":"Themes"},{"location":"features/#dropdowns","text":"Dropdowns are vertical navigation frames that contain an array of icons: icon : set ( \"dropdownSquareCorners\" , true ) icon : setDropdown ({ Icon . new () : setLabel ( \"Category 1\" ) , Icon . new () : setLabel ( \"Category 2\" ) , Icon . new () : setLabel ( \"Category 3\" ) , Icon . new () : setLabel ( \"Category 4\" ) : setName ( \"CategoryFourIcon\" ) : bindEvent ( \"selected\" , function ( self ) print (( \"%s was selected!\" ): format ( self . name )) end ) : bindEvent ( \"deselected\" , function ( self ) print (( \"%s was deselected!\" ): format ( self . name )) end ) , })","title":"Dropdowns"},{"location":"features/#menus","text":"Menus are horizontal navigation frames that contain an array of icons: icon : set ( \"menuMaxIconsBeforeScroll\" , 2 ) icon : setMenu ({ Icon . new () : setLabel ( \"Category 1\" ) , Icon . new () : setLabel ( \"Category 2\" ) , Icon . new () : setLabel ( \"Category 3\" ) , Icon . new () : setLabel ( \"Category 4\" ) : setName ( \"CategoryFourIcon\" ) : bindEvent ( \"selected\" , function ( self ) print (( \"%s was selected!\" ): format ( self . name )) end ) : bindEvent ( \"deselected\" , function ( self ) print (( \"%s was deselected!\" ): format ( self . name )) end ) , })","title":"Menus"},{"location":"features/#captions","text":"icon : setCaption ( \"Shop Caption\" )","title":"Captions"},{"location":"features/#tips","text":"icon : setTip ( \"Open Shop (v)\" )","title":"Tips"},{"location":"features/#toggle-items","text":"Binds a GuiObject (such as a frame) to appear or disappear when the icon is toggled icon : bindToggleItem ( shopFrame ) It is equivalent to doing: icon . deselected : Connect ( function () shopFrame . Visible = false end ) icon . selected : Connect ( function () shopFrame . Visible = true end )","title":"Toggle Items"},{"location":"features/#toggle-keys","text":"Binds a keycode which toggles the icon when pressed. -- When the 'v' key is pressed, the shop icon will open -- When pressed again it will close icon : bindToggleKey ( Enum . KeyCode . V )","title":"Toggle Keys"},{"location":"features/#corners","text":"icon : setCornerRadius ( 0 , 0 ) icon : setCornerRadius ( 0 , 8 ) icon : setCornerRadius ( 1 , 0 )","title":"Corners"},{"location":"features/#alignments","text":"-- Aligns the icon to the left of the screen (next to chat if present) -- This is the default behaviour icon : setLeft () -- Aligns the icon in the middle of the screen icon : setMid () -- Aligns the icon to the right of the screen (next to (...) if present) icon : setRight ()","title":"Alignments"},{"location":"features/#console-support","text":"","title":"Console Support"},{"location":"features/#overflows","text":"When accounting for many device types and screen sizes, icons may occasionally, particularly for smaller devices like phones, overlap with other icons or the bounds of the screen. TopbarPlus solves this problem with automatic overflows which prevent overlaps occuring. An overflow will appear when left-set or right-set icons exceed the boundary of the: Viewport Closest enabled opposite-aligned icon Closest enabled center-aligned icon These examples and more can be tested, viewed and edited at the Playground .","title":"Overflows"},{"location":"installation/","text":"Method 1 - Take the model \u00b6 Take the TopbarPlus model by Nanoblox. Open the toolbox and navigate to Inventory -> My Models. Click TopbarPlus to insert into your game and place anywhere within ReplicatedStorage . Method 2 - Download from Releases \u00b6 Visit the latest release . Under Assets , download TopbarPlus.rbxm . Within studio, navigate to MODEL -> Model and insert the file anywhere within ReplicatedStorage . Method 3 - With Rojo \u00b6 Setup with Rojo . Visit the TopbarPlus repository . Click Fork in the top right corner. Clone this fork into your local repository. Modify the default.project.json file to your desired location (by default TopbarPlus is built directly into ReplicatedStorage ). Call rojo serve (terminal or VSC plugin) and connect to the rojo studio plugin.","title":"Installation"},{"location":"installation/#method-1-take-the-model","text":"Take the TopbarPlus model by Nanoblox. Open the toolbox and navigate to Inventory -> My Models. Click TopbarPlus to insert into your game and place anywhere within ReplicatedStorage .","title":"Method 1 - Take the model"},{"location":"installation/#method-2-download-from-releases","text":"Visit the latest release . Under Assets , download TopbarPlus.rbxm . Within studio, navigate to MODEL -> Model and insert the file anywhere within ReplicatedStorage .","title":"Method 2 - Download from Releases"},{"location":"installation/#method-3-with-rojo","text":"Setup with Rojo . Visit the TopbarPlus repository . Click Fork in the top right corner. Clone this fork into your local repository. Modify the default.project.json file to your desired location (by default TopbarPlus is built directly into ReplicatedStorage ). Call rojo serve (terminal or VSC plugin) and connect to the rojo studio plugin.","title":"Method 3 - With Rojo"},{"location":"resources/","text":"Theme Settings Model Playground Discussion Repository Roblox-TS Port by grilme99 YouTube Video by Inctus If you would like to submit a resource (such as a video tutorial, port, etc), please see contributing .","title":"Resources"},{"location":"third_parties/","text":"TopbarPlus supports the use of multiple Icon packages within a single experience. It achieves this by assigning the first-required package as the 'lead' package, then whenever a second package is required (such as via the Icon module), the lead package modules are used instead. Without this errors would occur such as overlapping icons. You don't have to do anything for your third-party applications. Simply use TopbarPlus as normal.","title":"Third Parties"},{"location":"api/icon/","text":"Constructors \u00b6 new \u00b6 local icon = Icon . new () Constructs an empty 32x32 icon on the topbar. Methods \u00b6 set \u00b6 {chainable} icon : set ( settingName , value , iconState ) Applies a specific setting to an icon. All settings can be found here . If the setting falls under the 'toggleable' category then an iconState can be specified. For most scenarious it's recommended instead to apply settings using themes . get \u00b6 local value = icon : get ( settingName , iconState ) Retrieves the given settings value. If the setting falls under the 'toggleable' category then an iconState can be specified. getToggleState \u00b6 local selectedOrDeselectedString = icon : getToggleState () Returns the current toggleState, either \"deselected\" or \"selected\". setTheme \u00b6 {chainable} icon : setTheme ( theme ) Applies a theme to the given icon. See themes for more information. setEnabled \u00b6 {chainable} icon : setEnabled ( bool ) When set to false , the icon will be disabled and hidden. setName \u00b6 {chainable} icon : setName ( string ) Associates the given name to the icon which enables it to be retrieved with IconController.getIcon(name) . setProperty \u00b6 {chainable} icon : setProperty ( propertyName , value ) An alternative way of doing zone[propertyName] = value . This enables the easy-configuration of icon properties within chained methods. select \u00b6 {chainable} icon : select () Selects the icon (as if it were clicked once). deselect \u00b6 {chainable} icon : deselect () Deselects the icon (as if it were clicked, then clicked again). notify \u00b6 {chainable} icon : notify ( clearNoticeEvent ) Prompts a notice bubble which accumulates the further it is prompted. If the icon belongs to a dropdown or menu, then the notice will appear on the parent icon when the parent icon is deselected. clearNotices \u00b6 {chainable} icon : clearNotices () disableStateOverlay \u00b6 {chainable} icon : disableStateOverlay ( bool ) When set to true , disables the shade effect which appears when the icon is pressed and released. convertLabelToNumberSpinner \u00b6 {chainable} icon : convertLabelToNumberSpinner ( numberSpinner ) Takes a NumberSpinner object (by boatbomber) and converts it into the icons label. Example usage: Icon . new () : setName ( \"CashSpinnerIcon\" ) : setRight () : lock () : setSize ( 100 , 32 ) : give ( function ( icon ) local NumberSpinner = require ( replicatedStorage . NumberSpinner ) local labelSpinner = NumberSpinner . new () icon : convertLabelToNumberSpinner ( labelSpinner ) labelSpinner . Name = \"LabelSpinner\" labelSpinner . Decimals = 3 labelSpinner . Duration = 0.25 coroutine.wrap ( function () while wait ( 0.5 ) do labelSpinner . Value = math.random ( 100000 ) / 1000 end end )() end ) setImage \u00b6 {chainable} {toggleable} icon : setImage ( imageId , iconState ) Applies an image to the icon based on the given imaageId . imageId can be an assetId or a complete asset string. setLabel \u00b6 {chainable} {toggleable} icon : setLabel ( text , iconState ) setOrder \u00b6 {chainable} {toggleable} icon : setOrder ( order , iconState ) setCornerRadius \u00b6 {chainable} {toggleable} icon : setCornerRadius ( scale , offset , iconState ) setLeft \u00b6 {chainable} {toggleable} icon : setLeft ( iconState ) setMid \u00b6 {chainable} {toggleable} icon : setMid ( iconState ) setRight \u00b6 {chainable} {toggleable} icon : setRight ( iconState ) setImageYScale \u00b6 {chainable} {toggleable} icon : setImageYScale ( YScale , iconState ) Defines the proportional space the icons image takes up within the icons container. setImageRatio \u00b6 {chainable} {toggleable} icon : setImageRatio ( ratio , iconState ) Defines the x:y ratio dimensions as a number. By default ratio is 1.00 . setLabelYScale \u00b6 {chainable} {toggleable} icon : setLabelYScale ( YScale , iconState ) Defines how large label text appears.By default YScale is 0.45 . setBaseZIndex \u00b6 {chainable} {toggleable} icon : setBaseZIndex ( ZIndex , iconState ) Calculates the difference between the existing baseZIndex (i.e. instances.iconContainer.ZIndex ) and new value, then updates the ZIndex of all objects within the icon accoridngly using this difference. setSize \u00b6 {chainable} {toggleable} icon : setSize ( XOffset , YOffset , iconState ) Determines the icons container size. By default XOffset and YOffset are 32 . setXSize \u00b6 {chainable} {toggleable} icon : setXSize ( XOffset , iconState ) Same as icon:setSize except only for the X Offset (the Y offset is generated automatically). setYSize \u00b6 {chainable} {toggleable} icon : setYSize ( XOffset , iconState ) Same as icon:setSize except only for the Y Offset (the X offset is generated automatically). bindToggleItem \u00b6 {chainable} icon : bindToggleItem ( guiObjectOrLayerCollector ) Binds a GuiObject or LayerCollector to appear and disappeared when the icon is toggled. unbindToggleItem \u00b6 {chainable} icon : unbindToggleItem ( guiObjectOrLayerCollector ) Unbinds the given GuiObject or LayerCollector from the toggle. bindEvent \u00b6 {chainable} icon : bindEvent ( iconEventName , eventFunction ) Connects to an icon event based upon the given iconEventName and call eventFunction with arguments (self, ...) when the event is triggered. unbindEvent \u00b6 {chainable} icon : unbindEvent ( iconEventName ) Unbinds the connection of the associated iconEventName . bindToggleKey \u00b6 {chainable} icon : bindToggleKey ( keyCodeEnum ) Binds a keycode which toggles the icon when pressed. unbindToggleKey \u00b6 {chainable} icon : unbindToggleKey ( keyCodeEnum ) Unbinds the given keycode. call \u00b6 {chainable} icon : call ( func ) Calls the function as a separate coroutine with the first argument being the icon itself. This is useful when needing to extend the behaviour of an icon while remaining in the chain. give \u00b6 {chainable} icon : give ( userdata ) Passes the given userdata to the Icons maid to be destroyed/disconnected on the icons destruction. If a function is passed, it will be executed right away with its self (the icon) being passed as the first argument. The return value is then given to the maid (instead of the function). lock \u00b6 {chainable} icon : lock () Prevents the icon being toggled by user-input (such as clicking) however the icon can still be toggled via localscript using methods such as icon:select() . unlock \u00b6 {chainable} icon : unlock () Re-enables user-input to toggle the icon again. debounce \u00b6 {chainable} {yields} icon : debounce ( seconds ) Locks the icon, yields for the given time, then unlocks the icon, effectively shorthand for icon:lock() task.wait(seconds) icon:unlock() . This is useful for applying cooldowns (to prevent an icon from being pressed again) after an icon has been selected or deselected. autoDeselect \u00b6 {chainable} icon : autoDeselect ( true ) When set to true (the default) the icon is deselected when another icon (with autoDeselect enabled) is pressed. Set to false to prevent the icon being deselected when another icon is selected (a useful behaviour in dropdowns). This is a shorthand alternative to doing icon:setProperty(\"deselectWhenOtherIconSelected\", true) . setTopPadding \u00b6 {chainable} icon : setTopPadding ( offset , scale ) The gap between the top of the screen and the icon. setTip \u00b6 {chainable} icon : setTip ( text ) Sets a tip. To remove, pass nil as text . setCaption \u00b6 {chainable} icon : setCaption ( text ) Sets a caption. To remove, pass nil as text . join \u00b6 {chainable} icon : join ( parentIcon , featureName ) Parents the icon to the given parentIcon under the specified feature, either \"dropdown\" or \"menu\". leave \u00b6 {chainable} icon : leave () Unparents an icon from a parentIcon if it belongs to a dropdown or menu. setDropdown \u00b6 {chainable} icon : setDropdown ( arrayOfIcons ) Creates a vertical dropdown based upon the given table array of icons . Pass an empty table {} to remove the dropdown. Dropdown settings can be configured using themes or the set method . setMenu \u00b6 {chainable} icon : setMenu ( arrayOfIcons ) Creates a horizontal menu based upon the given table array of icons . Pass an empty table {} to remove the menu. Menu settings can be configured using themes or the set method . destroy \u00b6 {chainable} icon : destroy () Clears all connections and destroys all instances associated with the icon. Events \u00b6 selected \u00b6 icon . selected : Connect ( function () print ( \"The icon was selected (either via localscript or the user)\" ) end ) deselected \u00b6 icon . deselected : Connect ( function () print ( \"The icon was deselected (either via localscript or the user)\" ) end ) toggled \u00b6 icon . toggled : Connect ( function ( isSelected ) print (( \"The icon was %s (either via localscript or the user)\" ): format ( icon : getToggleState ( isSelected ))) end ) userSelected \u00b6 icon . userSelected : Connect ( function () print ( \"The icon was selected (solely by the user)\" ) end ) userDeselected \u00b6 icon . userDeselected : Connect ( function () print ( \"The icon was deselected (solely by the user)\" ) end ) userToggled \u00b6 icon . userToggled : Connect ( function ( isSelected ) print (( \"The icon was %s (solely by the user)\" ): format ( icon : getToggleState ( isSelected ))) end ) hoverStarted \u00b6 icon . hoverStarted : Connect ( function () print ( \"A mouse, finger or controller selection is hovering over the icon\" ) end ) hoverEnded \u00b6 icon . hoverEnded : Connect ( function () print ( \"The item is no longer hovering over the icon\" ) end ) dropdownOpened \u00b6 icon . dropdownOpened : Connect ( function () print ( \"The dropdown was opened\" ) end ) dropdownClosed \u00b6 icon . dropdownClosed : Connect ( function () print ( \"The dropdown was closed\" ) end ) menuOpened \u00b6 icon . menuOpened : Connect ( function () print ( \"The menu was opened\" ) end ) menuClosed \u00b6 icon . menuClosed : Connect ( function () print ( \"The menu was closed\" ) end ) notified \u00b6 icon . notified : Connect ( function () print ( \"New notice\" ) end ) Properties \u00b6 deselectWhenOtherIconSelected \u00b6 local bool = icon . deselectWhenOtherIconSelected --[default: 'true'] A bool deciding whether the icon will be deselected when another icon is selected. Defaults to true . This property can be updated either by doing icon:autoDeselect(bool) or icon:setProperty(\"deselectWhenOtherIconSelected\", bool) . accountForWhenDisabled \u00b6 local bool = icon . accountForWhenDisabled --[default: 'false'] A bool deciding whether to continue accounting for and updating the icons position on the topbar when disabled name \u00b6 {read-only} local string = icon . name --[default: '\"Unnamed Icon\"'] isSelected \u00b6 {read-only} local bool = icon . isSelected enabled \u00b6 {read-only} local bool = icon . enabled hovering \u00b6 {read-only} local bool = icon . hovering tipText \u00b6 {read-only} local stringOrNil = icon . tipText captionText \u00b6 {read-only} local stringOrNil = icon . captionText totalNotices \u00b6 {read-only} local int = icon . totalNotices dropdownIcons \u00b6 {read-only} local arrayOfIcons = icon . dropdownIcons menuIcons \u00b6 {read-only} local arrayOfIcons = icon . menuIcons dropdownOpen \u00b6 {read-only} local bool = icon . dropdownOpen menuOpen \u00b6 {read-only} local bool = icon . menuOpen locked \u00b6 {read-only} local bool = icon . locked topPadding \u00b6 {read-only} local udim = icon . topPadding targetPosition \u00b6 {read-only} local udim2 = icon . targetPosition The position the icon is at or aims to move to.","title":"Icon"},{"location":"api/icon/#constructors","text":"","title":"Constructors"},{"location":"api/icon/#new","text":"local icon = Icon . new () Constructs an empty 32x32 icon on the topbar.","title":"new"},{"location":"api/icon/#methods","text":"","title":"Methods"},{"location":"api/icon/#set","text":"{chainable} icon : set ( settingName , value , iconState ) Applies a specific setting to an icon. All settings can be found here . If the setting falls under the 'toggleable' category then an iconState can be specified. For most scenarious it's recommended instead to apply settings using themes .","title":"set"},{"location":"api/icon/#get","text":"local value = icon : get ( settingName , iconState ) Retrieves the given settings value. If the setting falls under the 'toggleable' category then an iconState can be specified.","title":"get"},{"location":"api/icon/#gettogglestate","text":"local selectedOrDeselectedString = icon : getToggleState () Returns the current toggleState, either \"deselected\" or \"selected\".","title":"getToggleState"},{"location":"api/icon/#settheme","text":"{chainable} icon : setTheme ( theme ) Applies a theme to the given icon. See themes for more information.","title":"setTheme"},{"location":"api/icon/#setenabled","text":"{chainable} icon : setEnabled ( bool ) When set to false , the icon will be disabled and hidden.","title":"setEnabled"},{"location":"api/icon/#setname","text":"{chainable} icon : setName ( string ) Associates the given name to the icon which enables it to be retrieved with IconController.getIcon(name) .","title":"setName"},{"location":"api/icon/#setproperty","text":"{chainable} icon : setProperty ( propertyName , value ) An alternative way of doing zone[propertyName] = value . This enables the easy-configuration of icon properties within chained methods.","title":"setProperty"},{"location":"api/icon/#select","text":"{chainable} icon : select () Selects the icon (as if it were clicked once).","title":"select"},{"location":"api/icon/#deselect","text":"{chainable} icon : deselect () Deselects the icon (as if it were clicked, then clicked again).","title":"deselect"},{"location":"api/icon/#notify","text":"{chainable} icon : notify ( clearNoticeEvent ) Prompts a notice bubble which accumulates the further it is prompted. If the icon belongs to a dropdown or menu, then the notice will appear on the parent icon when the parent icon is deselected.","title":"notify"},{"location":"api/icon/#clearnotices","text":"{chainable} icon : clearNotices ()","title":"clearNotices"},{"location":"api/icon/#disablestateoverlay","text":"{chainable} icon : disableStateOverlay ( bool ) When set to true , disables the shade effect which appears when the icon is pressed and released.","title":"disableStateOverlay"},{"location":"api/icon/#convertlabeltonumberspinner","text":"{chainable} icon : convertLabelToNumberSpinner ( numberSpinner ) Takes a NumberSpinner object (by boatbomber) and converts it into the icons label. Example usage: Icon . new () : setName ( \"CashSpinnerIcon\" ) : setRight () : lock () : setSize ( 100 , 32 ) : give ( function ( icon ) local NumberSpinner = require ( replicatedStorage . NumberSpinner ) local labelSpinner = NumberSpinner . new () icon : convertLabelToNumberSpinner ( labelSpinner ) labelSpinner . Name = \"LabelSpinner\" labelSpinner . Decimals = 3 labelSpinner . Duration = 0.25 coroutine.wrap ( function () while wait ( 0.5 ) do labelSpinner . Value = math.random ( 100000 ) / 1000 end end )() end )","title":"convertLabelToNumberSpinner"},{"location":"api/icon/#setimage","text":"{chainable} {toggleable} icon : setImage ( imageId , iconState ) Applies an image to the icon based on the given imaageId . imageId can be an assetId or a complete asset string.","title":"setImage"},{"location":"api/icon/#setlabel","text":"{chainable} {toggleable} icon : setLabel ( text , iconState )","title":"setLabel"},{"location":"api/icon/#setorder","text":"{chainable} {toggleable} icon : setOrder ( order , iconState )","title":"setOrder"},{"location":"api/icon/#setcornerradius","text":"{chainable} {toggleable} icon : setCornerRadius ( scale , offset , iconState )","title":"setCornerRadius"},{"location":"api/icon/#setleft","text":"{chainable} {toggleable} icon : setLeft ( iconState )","title":"setLeft"},{"location":"api/icon/#setmid","text":"{chainable} {toggleable} icon : setMid ( iconState )","title":"setMid"},{"location":"api/icon/#setright","text":"{chainable} {toggleable} icon : setRight ( iconState )","title":"setRight"},{"location":"api/icon/#setimageyscale","text":"{chainable} {toggleable} icon : setImageYScale ( YScale , iconState ) Defines the proportional space the icons image takes up within the icons container.","title":"setImageYScale"},{"location":"api/icon/#setimageratio","text":"{chainable} {toggleable} icon : setImageRatio ( ratio , iconState ) Defines the x:y ratio dimensions as a number. By default ratio is 1.00 .","title":"setImageRatio"},{"location":"api/icon/#setlabelyscale","text":"{chainable} {toggleable} icon : setLabelYScale ( YScale , iconState ) Defines how large label text appears.By default YScale is 0.45 .","title":"setLabelYScale"},{"location":"api/icon/#setbasezindex","text":"{chainable} {toggleable} icon : setBaseZIndex ( ZIndex , iconState ) Calculates the difference between the existing baseZIndex (i.e. instances.iconContainer.ZIndex ) and new value, then updates the ZIndex of all objects within the icon accoridngly using this difference.","title":"setBaseZIndex"},{"location":"api/icon/#setsize","text":"{chainable} {toggleable} icon : setSize ( XOffset , YOffset , iconState ) Determines the icons container size. By default XOffset and YOffset are 32 .","title":"setSize"},{"location":"api/icon/#setxsize","text":"{chainable} {toggleable} icon : setXSize ( XOffset , iconState ) Same as icon:setSize except only for the X Offset (the Y offset is generated automatically).","title":"setXSize"},{"location":"api/icon/#setysize","text":"{chainable} {toggleable} icon : setYSize ( XOffset , iconState ) Same as icon:setSize except only for the Y Offset (the X offset is generated automatically).","title":"setYSize"},{"location":"api/icon/#bindtoggleitem","text":"{chainable} icon : bindToggleItem ( guiObjectOrLayerCollector ) Binds a GuiObject or LayerCollector to appear and disappeared when the icon is toggled.","title":"bindToggleItem"},{"location":"api/icon/#unbindtoggleitem","text":"{chainable} icon : unbindToggleItem ( guiObjectOrLayerCollector ) Unbinds the given GuiObject or LayerCollector from the toggle.","title":"unbindToggleItem"},{"location":"api/icon/#bindevent","text":"{chainable} icon : bindEvent ( iconEventName , eventFunction ) Connects to an icon event based upon the given iconEventName and call eventFunction with arguments (self, ...) when the event is triggered.","title":"bindEvent"},{"location":"api/icon/#unbindevent","text":"{chainable} icon : unbindEvent ( iconEventName ) Unbinds the connection of the associated iconEventName .","title":"unbindEvent"},{"location":"api/icon/#bindtogglekey","text":"{chainable} icon : bindToggleKey ( keyCodeEnum ) Binds a keycode which toggles the icon when pressed.","title":"bindToggleKey"},{"location":"api/icon/#unbindtogglekey","text":"{chainable} icon : unbindToggleKey ( keyCodeEnum ) Unbinds the given keycode.","title":"unbindToggleKey"},{"location":"api/icon/#call","text":"{chainable} icon : call ( func ) Calls the function as a separate coroutine with the first argument being the icon itself. This is useful when needing to extend the behaviour of an icon while remaining in the chain.","title":"call"},{"location":"api/icon/#give","text":"{chainable} icon : give ( userdata ) Passes the given userdata to the Icons maid to be destroyed/disconnected on the icons destruction. If a function is passed, it will be executed right away with its self (the icon) being passed as the first argument. The return value is then given to the maid (instead of the function).","title":"give"},{"location":"api/icon/#lock","text":"{chainable} icon : lock () Prevents the icon being toggled by user-input (such as clicking) however the icon can still be toggled via localscript using methods such as icon:select() .","title":"lock"},{"location":"api/icon/#unlock","text":"{chainable} icon : unlock () Re-enables user-input to toggle the icon again.","title":"unlock"},{"location":"api/icon/#debounce","text":"{chainable} {yields} icon : debounce ( seconds ) Locks the icon, yields for the given time, then unlocks the icon, effectively shorthand for icon:lock() task.wait(seconds) icon:unlock() . This is useful for applying cooldowns (to prevent an icon from being pressed again) after an icon has been selected or deselected.","title":"debounce"},{"location":"api/icon/#autodeselect","text":"{chainable} icon : autoDeselect ( true ) When set to true (the default) the icon is deselected when another icon (with autoDeselect enabled) is pressed. Set to false to prevent the icon being deselected when another icon is selected (a useful behaviour in dropdowns). This is a shorthand alternative to doing icon:setProperty(\"deselectWhenOtherIconSelected\", true) .","title":"autoDeselect"},{"location":"api/icon/#settoppadding","text":"{chainable} icon : setTopPadding ( offset , scale ) The gap between the top of the screen and the icon.","title":"setTopPadding"},{"location":"api/icon/#settip","text":"{chainable} icon : setTip ( text ) Sets a tip. To remove, pass nil as text .","title":"setTip"},{"location":"api/icon/#setcaption","text":"{chainable} icon : setCaption ( text ) Sets a caption. To remove, pass nil as text .","title":"setCaption"},{"location":"api/icon/#join","text":"{chainable} icon : join ( parentIcon , featureName ) Parents the icon to the given parentIcon under the specified feature, either \"dropdown\" or \"menu\".","title":"join"},{"location":"api/icon/#leave","text":"{chainable} icon : leave () Unparents an icon from a parentIcon if it belongs to a dropdown or menu.","title":"leave"},{"location":"api/icon/#setdropdown","text":"{chainable} icon : setDropdown ( arrayOfIcons ) Creates a vertical dropdown based upon the given table array of icons . Pass an empty table {} to remove the dropdown. Dropdown settings can be configured using themes or the set method .","title":"setDropdown"},{"location":"api/icon/#setmenu","text":"{chainable} icon : setMenu ( arrayOfIcons ) Creates a horizontal menu based upon the given table array of icons . Pass an empty table {} to remove the menu. Menu settings can be configured using themes or the set method .","title":"setMenu"},{"location":"api/icon/#destroy","text":"{chainable} icon : destroy () Clears all connections and destroys all instances associated with the icon.","title":"destroy"},{"location":"api/icon/#events","text":"","title":"Events"},{"location":"api/icon/#selected","text":"icon . selected : Connect ( function () print ( \"The icon was selected (either via localscript or the user)\" ) end )","title":"selected"},{"location":"api/icon/#deselected","text":"icon . deselected : Connect ( function () print ( \"The icon was deselected (either via localscript or the user)\" ) end )","title":"deselected"},{"location":"api/icon/#toggled","text":"icon . toggled : Connect ( function ( isSelected ) print (( \"The icon was %s (either via localscript or the user)\" ): format ( icon : getToggleState ( isSelected ))) end )","title":"toggled"},{"location":"api/icon/#userselected","text":"icon . userSelected : Connect ( function () print ( \"The icon was selected (solely by the user)\" ) end )","title":"userSelected"},{"location":"api/icon/#userdeselected","text":"icon . userDeselected : Connect ( function () print ( \"The icon was deselected (solely by the user)\" ) end )","title":"userDeselected"},{"location":"api/icon/#usertoggled","text":"icon . userToggled : Connect ( function ( isSelected ) print (( \"The icon was %s (solely by the user)\" ): format ( icon : getToggleState ( isSelected ))) end )","title":"userToggled"},{"location":"api/icon/#hoverstarted","text":"icon . hoverStarted : Connect ( function () print ( \"A mouse, finger or controller selection is hovering over the icon\" ) end )","title":"hoverStarted"},{"location":"api/icon/#hoverended","text":"icon . hoverEnded : Connect ( function () print ( \"The item is no longer hovering over the icon\" ) end )","title":"hoverEnded"},{"location":"api/icon/#dropdownopened","text":"icon . dropdownOpened : Connect ( function () print ( \"The dropdown was opened\" ) end )","title":"dropdownOpened"},{"location":"api/icon/#dropdownclosed","text":"icon . dropdownClosed : Connect ( function () print ( \"The dropdown was closed\" ) end )","title":"dropdownClosed"},{"location":"api/icon/#menuopened","text":"icon . menuOpened : Connect ( function () print ( \"The menu was opened\" ) end )","title":"menuOpened"},{"location":"api/icon/#menuclosed","text":"icon . menuClosed : Connect ( function () print ( \"The menu was closed\" ) end )","title":"menuClosed"},{"location":"api/icon/#notified","text":"icon . notified : Connect ( function () print ( \"New notice\" ) end )","title":"notified"},{"location":"api/icon/#properties","text":"","title":"Properties"},{"location":"api/icon/#deselectwhenothericonselected","text":"local bool = icon . deselectWhenOtherIconSelected --[default: 'true'] A bool deciding whether the icon will be deselected when another icon is selected. Defaults to true . This property can be updated either by doing icon:autoDeselect(bool) or icon:setProperty(\"deselectWhenOtherIconSelected\", bool) .","title":"deselectWhenOtherIconSelected"},{"location":"api/icon/#accountforwhendisabled","text":"local bool = icon . accountForWhenDisabled --[default: 'false'] A bool deciding whether to continue accounting for and updating the icons position on the topbar when disabled","title":"accountForWhenDisabled"},{"location":"api/icon/#name","text":"{read-only} local string = icon . name --[default: '\"Unnamed Icon\"']","title":"name"},{"location":"api/icon/#isselected","text":"{read-only} local bool = icon . isSelected","title":"isSelected"},{"location":"api/icon/#enabled","text":"{read-only} local bool = icon . enabled","title":"enabled"},{"location":"api/icon/#hovering","text":"{read-only} local bool = icon . hovering","title":"hovering"},{"location":"api/icon/#tiptext","text":"{read-only} local stringOrNil = icon . tipText","title":"tipText"},{"location":"api/icon/#captiontext","text":"{read-only} local stringOrNil = icon . captionText","title":"captionText"},{"location":"api/icon/#totalnotices","text":"{read-only} local int = icon . totalNotices","title":"totalNotices"},{"location":"api/icon/#dropdownicons","text":"{read-only} local arrayOfIcons = icon . dropdownIcons","title":"dropdownIcons"},{"location":"api/icon/#menuicons","text":"{read-only} local arrayOfIcons = icon . menuIcons","title":"menuIcons"},{"location":"api/icon/#dropdownopen","text":"{read-only} local bool = icon . dropdownOpen","title":"dropdownOpen"},{"location":"api/icon/#menuopen","text":"{read-only} local bool = icon . menuOpen","title":"menuOpen"},{"location":"api/icon/#locked","text":"{read-only} local bool = icon . locked","title":"locked"},{"location":"api/icon/#toppadding","text":"{read-only} local udim = icon . topPadding","title":"topPadding"},{"location":"api/icon/#targetposition","text":"{read-only} local udim2 = icon . targetPosition The position the icon is at or aims to move to.","title":"targetPosition"},{"location":"api/icon_controller/","text":"Functions \u00b6 setGameTheme \u00b6 IconController . setGameTheme ( theme ) Sets the default theme which is applied to all existing and future icons. setDisplayOrder \u00b6 IconController . setDisplayOrder ( number ) Changes the DisplayOrder of the TopbarPlus ScreenGui to the given value. setTopbarEnabled \u00b6 IconController . setTopbarEnabled ( bool ) When set to false , hides all icons created with TopbarPlus. This can also be achieved by calling starterGui:SetCore(\"TopbarEnabled\", false) . setGap \u00b6 IconController . setGap ( integer , alignment ) Defines the offset width (i.e. gap) between each icon for the given alignment, left , mid , right , or all alignments if not specified. setLeftOffset \u00b6 IconController . setLeftOffset ( integer ) Defines the offset from the left side of the screen to the nearest left-set icon. setRightOffset \u00b6 IconController . setRightOffset ( integer ) Defines the offset from the right side of the screen to the nearest right-set icon. updateTopbar \u00b6 IconController . updateTopbar () Determines how icons should be positioned on the topbar and moves them accordingly. clearIconOnSpawn \u00b6 IconController . clearIconOnSpawn ( icon ) Calls destroy on the given icon when the player respawns. This is useful for scenarious where you wish to cleanup icons that are constructed within a Gui with ResetOnSpawn set to true . For example: -- Place at the bottom of your icon creator localscript local icons = IconController . getIcons () for _ , icon in pairs ( icons ) do IconController . clearIconOnSpawn ( icon ) end getIcons \u00b6 local arrayOfIcons = IconController . getIcons () Returns all icons as an array. getIcon \u00b6 local icon = IconController . getIcon ( name ) Returns the icon with the given name (or false if not found). If multiple icons have the same name, then one will be returned randomly. disableHealthbar \u00b6 IconController . disableHealthbar ( bool ) Hides the fake healthbar (if currently visible) and prevents it becoming visible again (which normally occurs when the player takes damage). disableControllerOption \u00b6 IconController . disableControllerOption ( bool ) Hides the 'enter controller mode' icon which otherwise appears when a mouse and controller are enabled. Properties \u00b6 voiceChatEnabled \u00b6 local bool = IconController . voiceChatEnabled --[default: 'false'] It's important you set this to true IconController.voiceChatEnabled = true after enabling Voice Chat within your experience so that TopbarPlus can account for the BETA VoiceChat label. More information here: https://devforum.roblox.com/t/introduce-a-voicechatservice-property-or-method-to-see-if-voice-chat-is-enabled-in-that-experience/1999526 mimicCoreGui \u00b6 local bool = IconController . mimicCoreGui --[default: 'true'] Set to false to have the topbar persist even when game:GetService(\"StarterGui\"):SetCore(\"TopbarEnabled\", false) is called. controllerModeEnabled \u00b6 {read-only} local bool = IconController . controllerModeEnabled leftGap \u00b6 {read-only} local gapNumber = IconController . leftGap --[default: '12'] midGap \u00b6 {read-only} local gapNumber = IconController . midGap --[default: '12'] rightGap \u00b6 {read-only} local gapNumber = IconController . rightGap --[default: '12'] leftOffset \u00b6 {read-only} local offset = IconController . leftGap --[default: '0'] rightOffset \u00b6 {read-only} local offset = IconController . rightGap --[default: '0']","title":"IconController"},{"location":"api/icon_controller/#functions","text":"","title":"Functions"},{"location":"api/icon_controller/#setgametheme","text":"IconController . setGameTheme ( theme ) Sets the default theme which is applied to all existing and future icons.","title":"setGameTheme"},{"location":"api/icon_controller/#setdisplayorder","text":"IconController . setDisplayOrder ( number ) Changes the DisplayOrder of the TopbarPlus ScreenGui to the given value.","title":"setDisplayOrder"},{"location":"api/icon_controller/#settopbarenabled","text":"IconController . setTopbarEnabled ( bool ) When set to false , hides all icons created with TopbarPlus. This can also be achieved by calling starterGui:SetCore(\"TopbarEnabled\", false) .","title":"setTopbarEnabled"},{"location":"api/icon_controller/#setgap","text":"IconController . setGap ( integer , alignment ) Defines the offset width (i.e. gap) between each icon for the given alignment, left , mid , right , or all alignments if not specified.","title":"setGap"},{"location":"api/icon_controller/#setleftoffset","text":"IconController . setLeftOffset ( integer ) Defines the offset from the left side of the screen to the nearest left-set icon.","title":"setLeftOffset"},{"location":"api/icon_controller/#setrightoffset","text":"IconController . setRightOffset ( integer ) Defines the offset from the right side of the screen to the nearest right-set icon.","title":"setRightOffset"},{"location":"api/icon_controller/#updatetopbar","text":"IconController . updateTopbar () Determines how icons should be positioned on the topbar and moves them accordingly.","title":"updateTopbar"},{"location":"api/icon_controller/#clearicononspawn","text":"IconController . clearIconOnSpawn ( icon ) Calls destroy on the given icon when the player respawns. This is useful for scenarious where you wish to cleanup icons that are constructed within a Gui with ResetOnSpawn set to true . For example: -- Place at the bottom of your icon creator localscript local icons = IconController . getIcons () for _ , icon in pairs ( icons ) do IconController . clearIconOnSpawn ( icon ) end","title":"clearIconOnSpawn"},{"location":"api/icon_controller/#geticons","text":"local arrayOfIcons = IconController . getIcons () Returns all icons as an array.","title":"getIcons"},{"location":"api/icon_controller/#geticon","text":"local icon = IconController . getIcon ( name ) Returns the icon with the given name (or false if not found). If multiple icons have the same name, then one will be returned randomly.","title":"getIcon"},{"location":"api/icon_controller/#disablehealthbar","text":"IconController . disableHealthbar ( bool ) Hides the fake healthbar (if currently visible) and prevents it becoming visible again (which normally occurs when the player takes damage).","title":"disableHealthbar"},{"location":"api/icon_controller/#disablecontrolleroption","text":"IconController . disableControllerOption ( bool ) Hides the 'enter controller mode' icon which otherwise appears when a mouse and controller are enabled.","title":"disableControllerOption"},{"location":"api/icon_controller/#properties","text":"","title":"Properties"},{"location":"api/icon_controller/#voicechatenabled","text":"local bool = IconController . voiceChatEnabled --[default: 'false'] It's important you set this to true IconController.voiceChatEnabled = true after enabling Voice Chat within your experience so that TopbarPlus can account for the BETA VoiceChat label. More information here: https://devforum.roblox.com/t/introduce-a-voicechatservice-property-or-method-to-see-if-voice-chat-is-enabled-in-that-experience/1999526","title":"voiceChatEnabled"},{"location":"api/icon_controller/#mimiccoregui","text":"local bool = IconController . mimicCoreGui --[default: 'true'] Set to false to have the topbar persist even when game:GetService(\"StarterGui\"):SetCore(\"TopbarEnabled\", false) is called.","title":"mimicCoreGui"},{"location":"api/icon_controller/#controllermodeenabled","text":"{read-only} local bool = IconController . controllerModeEnabled","title":"controllerModeEnabled"},{"location":"api/icon_controller/#leftgap","text":"{read-only} local gapNumber = IconController . leftGap --[default: '12']","title":"leftGap"},{"location":"api/icon_controller/#midgap","text":"{read-only} local gapNumber = IconController . midGap --[default: '12']","title":"midGap"},{"location":"api/icon_controller/#rightgap","text":"{read-only} local gapNumber = IconController . rightGap --[default: '12']","title":"rightGap"},{"location":"api/icon_controller/#leftoffset","text":"{read-only} local offset = IconController . leftGap --[default: '0']","title":"leftOffset"},{"location":"api/icon_controller/#rightoffset","text":"{read-only} local offset = IconController . rightGap --[default: '0']","title":"rightOffset"},{"location":"api/instances/","text":"instances.iconButton.MouseButton1Click:Connect(function() \u00b6 if self.locked then return end if self._draggingFinger then return false elseif self.isSelected then self:deselect() return true end self:select() end)--]] instances.iconButton.MouseButton1Click:Connect(function() if self.locked then return end if self.isSelected then self:deselect() self.userDeselected:Fire() self.userToggled:Fire(false) return true end self:select() self.userSelected:Fire() self.userToggled:Fire(true) end) instances.iconButton.MouseButton2Click:Connect(function() self._rightClicking = true if self:get(\"dropdownToggleOnRightClick\") == true then self:_update(\"dropdownSize\") end if self:get(\"menuToggleOnRightClick\") == true then self:_update(\"menuSize\") end self._rightClicking = false end) -- Shows/hides the dark overlay when the icon is presssed/released instances.iconButton.MouseButton1Down:Connect(function() if self.locked then return end self:_updateStateOverlay(0.7, Color3.new(0, 0, 0)) end) instances.iconButton.MouseButton1Up:Connect(function() if self.overlayLocked then return end self:_updateStateOverlay(0.9, Color3.new(1, 1, 1)) end) -- Tap away + KeyCode toggles userInputService.InputBegan:Connect(function(input, touchingAnObject) local validTapAwayInputs = { [Enum.UserInputType.MouseButton1] = true, [Enum.UserInputType.MouseButton2] = true, [Enum.UserInputType.MouseButton3] = true, [Enum.UserInputType.Touch] = true, } if not touchingAnObject and validTapAwayInputs[input.UserInputType] then self._tappingAway = true if self.dropdownOpen and self:get(\"dropdownCloseOnTapAway\") == true then self:_update(\"dropdownSize\") end if self.menuOpen and self:get(\"menuCloseOnTapAway\") == true then self:_update(\"menuSize\") end self._tappingAway = false end -- if self._bindedToggleKeys[input.KeyCode] and not touchingAnObject and not self.locked then if self.isSelected then self:deselect() self.userDeselected:Fire() self.userToggled:Fire(false) else self:select() self.userSelected:Fire() self.userToggled:Fire(true) end end -- end) -- hoverStarted and hoverEnded triggers and actions -- these are triggered when a mouse enters/leaves the icon with a mouse, is highlighted with -- a controller selection box, or dragged over with a touchpad self.hoverStarted:Connect(function(x, y) self.hovering = true if not self.locked then self:_updateStateOverlay(0.9, Color3.fromRGB(255, 255, 255)) end self:_updateHovering() end) self.hoverEnded:Connect(function() self.hovering = false self:_updateStateOverlay(1) self._hoveringMaid:clean() self:_updateHovering() end) instances.iconButton.MouseEnter:Connect(function(x, y) -- Mouse (started) self.hoverStarted:Fire(x, y) end) instances.iconButton.MouseLeave:Connect(function() -- Mouse (ended) self.hoverEnded:Fire() end) instances.iconButton.SelectionGained:Connect(function() -- Controller (started) self.hoverStarted:Fire() end) instances.iconButton.SelectionLost:Connect(function() -- Controller (ended) self.hoverEnded:Fire() end) instances.iconButton.MouseButton1Down:Connect(function() -- TouchPad (started) if self._draggingFinger then self.hoverStarted:Fire() end -- Long press check local heartbeatConnection local releaseConnection local longPressTime = 0.7 local endTick = tick() + longPressTime heartbeatConnection = runService.Heartbeat:Connect(function() if tick() >= endTick then releaseConnection:Disconnect() heartbeatConnection:Disconnect() self._longPressing = true if self:get(\"dropdownToggleOnLongPress\") == true then self:_update(\"dropdownSize\") end if self:get(\"menuToggleOnLongPress\") == true then self:_update(\"menuSize\") end self._longPressing = false end end) releaseConnection = instances.iconButton.MouseButton1Up:Connect(function() releaseConnection:Disconnect() heartbeatConnection:Disconnect() end) end) if userInputService.TouchEnabled then instances.iconButton.MouseButton1Up:Connect(function() -- TouchPad (ended), this was originally enabled for non-touchpads too if self.hovering then self.hoverEnded:Fire() end end) -- This is used to highlight when a mobile/touch device is dragging their finger accross the screen -- this is important for determining the hoverStarted and hoverEnded events on mobile local dragCount = 0 userInputService.TouchMoved:Connect(function(touch, touchingAnObject) if touchingAnObject then return end self._draggingFinger = true end) userInputService.TouchEnded:Connect(function() self._draggingFinger = false end) end -- Finish self._updatingIconSize = false self:_updateIconSize() IconController.iconAdded:Fire(self) return self end -- This is the same as Icon.new(), except it adds additional behaviour for certain specified names designed to mimic core icons, such as 'Chat' function Icon.mimic(coreIconToMimic) local iconName = coreIconToMimic..\"Mimic\" local icon = IconController.getIcon(iconName) if icon then return icon end icon = Icon.new() icon:setName(iconName) if coreIconToMimic == \"Chat\" then icon:setOrder(-1) icon:setImage(\"rbxasset://textures/ui/TopBar/chatOff.png\", \"deselected\") icon:setImage(\"rbxasset://textures/ui/TopBar/chatOn.png\", \"selected\") icon:setImageYScale(0.625) -- Since roblox's core gui api sucks melons I reverted to listening for signals within the chat modules -- unfortunately however they've just gone and removed these signals therefore -- this mimic chat and similar features are now impossible to recreate accurately, so I'm disabling for now -- ill go ahead and post a feature request; fingers crossed we get something by the next decade --[[ -- Setup maid and cleanup actioon local maid = icon._maid icon._fakeChatMaid = maid:give(Maid.new()) maid.chatMimicCleanup = function() starterGui:SetCoreGuiEnabled(\"Chat\", icon.enabled) end -- Tap into chat module local chatMainModule = players.LocalPlayer.PlayerScripts:WaitForChild(\"ChatScript\").ChatMain local ChatMain = require(chatMainModule) local function displayChatBar(visibility) icon.ignoreVisibilityStateChange = true ChatMain.CoreGuiEnabled:fire(visibility) ChatMain.IsCoreGuiEnabled = false ChatMain:SetVisible(visibility) icon.ignoreVisibilityStateChange = nil end local function setIconEnabled(visibility) icon.ignoreVisibilityStateChange = true ChatMain.CoreGuiEnabled:fire(visibility) icon:setEnabled(visibility) starterGui:SetCoreGuiEnabled(\"Chat\", false) icon:deselect() icon.updated:Fire() icon.ignoreVisibilityStateChange = nil end -- Open chat via Slash key icon._fakeChatMaid:give(userInputService.InputEnded:Connect(function(inputObject, gameProcessedEvent) if gameProcessedEvent then return \"Another menu has priority\" elseif not(inputObject.KeyCode == Enum.KeyCode.Slash or inputObject.KeyCode == Enum.SpecialKey.ChatHotkey) then return \"No relavent key pressed\" elseif ChatMain.IsFocused() then return \"Chat bar already open\" elseif not icon.enabled then return \"Icon disabled\" end ChatMain:FocusChatBar(true) icon:select() end)) -- ChatActive icon._fakeChatMaid:give(ChatMain.VisibilityStateChanged:Connect(function(visibility) if not icon.ignoreVisibilityStateChange then if visibility == true then icon:select() else icon:deselect() end end end)) -- Keep when other icons selected icon.deselectWhenOtherIconSelected = false -- Mimic chat notifications icon._fakeChatMaid:give(ChatMain.MessagesChanged:connect(function() if ChatMain:GetVisibility() == true then return \"ChatWindow was open\" end icon:notify(icon.selected) end)) -- Mimic visibility when StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, state) is called coroutine.wrap(function() runService.Heartbeat:Wait() icon._fakeChatMaid:give(ChatMain.CoreGuiEnabled:connect(function(newState) if icon.ignoreVisibilityStateChange then return \"ignoreVisibilityStateChange enabled\" end local topbarEnabled = starterGui:GetCore(\"TopbarEnabled\") if topbarEnabled ~= IconController.previousTopbarEnabled then return \"SetCore was called instead of SetCoreGuiEnabled\" end if not icon.enabled and userInputService:IsKeyDown(Enum.KeyCode.LeftShift) and userInputService:IsKeyDown(Enum.KeyCode.P) then icon:setEnabled(true) else setIconEnabled(newState) end end)) end)() icon.deselected:Connect(function() displayChatBar(false) end) icon.selected:Connect(function() displayChatBar(true) end) setIconEnabled(starterGui:GetCoreGuiEnabled(\"Chat\"))","title":"Instances"},{"location":"api/instances/#instancesiconbuttonmousebutton1clickconnectfunction","text":"if self.locked then return end if self._draggingFinger then return false elseif self.isSelected then self:deselect() return true end self:select() end)--]] instances.iconButton.MouseButton1Click:Connect(function() if self.locked then return end if self.isSelected then self:deselect() self.userDeselected:Fire() self.userToggled:Fire(false) return true end self:select() self.userSelected:Fire() self.userToggled:Fire(true) end) instances.iconButton.MouseButton2Click:Connect(function() self._rightClicking = true if self:get(\"dropdownToggleOnRightClick\") == true then self:_update(\"dropdownSize\") end if self:get(\"menuToggleOnRightClick\") == true then self:_update(\"menuSize\") end self._rightClicking = false end) -- Shows/hides the dark overlay when the icon is presssed/released instances.iconButton.MouseButton1Down:Connect(function() if self.locked then return end self:_updateStateOverlay(0.7, Color3.new(0, 0, 0)) end) instances.iconButton.MouseButton1Up:Connect(function() if self.overlayLocked then return end self:_updateStateOverlay(0.9, Color3.new(1, 1, 1)) end) -- Tap away + KeyCode toggles userInputService.InputBegan:Connect(function(input, touchingAnObject) local validTapAwayInputs = { [Enum.UserInputType.MouseButton1] = true, [Enum.UserInputType.MouseButton2] = true, [Enum.UserInputType.MouseButton3] = true, [Enum.UserInputType.Touch] = true, } if not touchingAnObject and validTapAwayInputs[input.UserInputType] then self._tappingAway = true if self.dropdownOpen and self:get(\"dropdownCloseOnTapAway\") == true then self:_update(\"dropdownSize\") end if self.menuOpen and self:get(\"menuCloseOnTapAway\") == true then self:_update(\"menuSize\") end self._tappingAway = false end -- if self._bindedToggleKeys[input.KeyCode] and not touchingAnObject and not self.locked then if self.isSelected then self:deselect() self.userDeselected:Fire() self.userToggled:Fire(false) else self:select() self.userSelected:Fire() self.userToggled:Fire(true) end end -- end) -- hoverStarted and hoverEnded triggers and actions -- these are triggered when a mouse enters/leaves the icon with a mouse, is highlighted with -- a controller selection box, or dragged over with a touchpad self.hoverStarted:Connect(function(x, y) self.hovering = true if not self.locked then self:_updateStateOverlay(0.9, Color3.fromRGB(255, 255, 255)) end self:_updateHovering() end) self.hoverEnded:Connect(function() self.hovering = false self:_updateStateOverlay(1) self._hoveringMaid:clean() self:_updateHovering() end) instances.iconButton.MouseEnter:Connect(function(x, y) -- Mouse (started) self.hoverStarted:Fire(x, y) end) instances.iconButton.MouseLeave:Connect(function() -- Mouse (ended) self.hoverEnded:Fire() end) instances.iconButton.SelectionGained:Connect(function() -- Controller (started) self.hoverStarted:Fire() end) instances.iconButton.SelectionLost:Connect(function() -- Controller (ended) self.hoverEnded:Fire() end) instances.iconButton.MouseButton1Down:Connect(function() -- TouchPad (started) if self._draggingFinger then self.hoverStarted:Fire() end -- Long press check local heartbeatConnection local releaseConnection local longPressTime = 0.7 local endTick = tick() + longPressTime heartbeatConnection = runService.Heartbeat:Connect(function() if tick() >= endTick then releaseConnection:Disconnect() heartbeatConnection:Disconnect() self._longPressing = true if self:get(\"dropdownToggleOnLongPress\") == true then self:_update(\"dropdownSize\") end if self:get(\"menuToggleOnLongPress\") == true then self:_update(\"menuSize\") end self._longPressing = false end end) releaseConnection = instances.iconButton.MouseButton1Up:Connect(function() releaseConnection:Disconnect() heartbeatConnection:Disconnect() end) end) if userInputService.TouchEnabled then instances.iconButton.MouseButton1Up:Connect(function() -- TouchPad (ended), this was originally enabled for non-touchpads too if self.hovering then self.hoverEnded:Fire() end end) -- This is used to highlight when a mobile/touch device is dragging their finger accross the screen -- this is important for determining the hoverStarted and hoverEnded events on mobile local dragCount = 0 userInputService.TouchMoved:Connect(function(touch, touchingAnObject) if touchingAnObject then return end self._draggingFinger = true end) userInputService.TouchEnded:Connect(function() self._draggingFinger = false end) end -- Finish self._updatingIconSize = false self:_updateIconSize() IconController.iconAdded:Fire(self) return self end -- This is the same as Icon.new(), except it adds additional behaviour for certain specified names designed to mimic core icons, such as 'Chat' function Icon.mimic(coreIconToMimic) local iconName = coreIconToMimic..\"Mimic\" local icon = IconController.getIcon(iconName) if icon then return icon end icon = Icon.new() icon:setName(iconName) if coreIconToMimic == \"Chat\" then icon:setOrder(-1) icon:setImage(\"rbxasset://textures/ui/TopBar/chatOff.png\", \"deselected\") icon:setImage(\"rbxasset://textures/ui/TopBar/chatOn.png\", \"selected\") icon:setImageYScale(0.625) -- Since roblox's core gui api sucks melons I reverted to listening for signals within the chat modules -- unfortunately however they've just gone and removed these signals therefore -- this mimic chat and similar features are now impossible to recreate accurately, so I'm disabling for now -- ill go ahead and post a feature request; fingers crossed we get something by the next decade --[[ -- Setup maid and cleanup actioon local maid = icon._maid icon._fakeChatMaid = maid:give(Maid.new()) maid.chatMimicCleanup = function() starterGui:SetCoreGuiEnabled(\"Chat\", icon.enabled) end -- Tap into chat module local chatMainModule = players.LocalPlayer.PlayerScripts:WaitForChild(\"ChatScript\").ChatMain local ChatMain = require(chatMainModule) local function displayChatBar(visibility) icon.ignoreVisibilityStateChange = true ChatMain.CoreGuiEnabled:fire(visibility) ChatMain.IsCoreGuiEnabled = false ChatMain:SetVisible(visibility) icon.ignoreVisibilityStateChange = nil end local function setIconEnabled(visibility) icon.ignoreVisibilityStateChange = true ChatMain.CoreGuiEnabled:fire(visibility) icon:setEnabled(visibility) starterGui:SetCoreGuiEnabled(\"Chat\", false) icon:deselect() icon.updated:Fire() icon.ignoreVisibilityStateChange = nil end -- Open chat via Slash key icon._fakeChatMaid:give(userInputService.InputEnded:Connect(function(inputObject, gameProcessedEvent) if gameProcessedEvent then return \"Another menu has priority\" elseif not(inputObject.KeyCode == Enum.KeyCode.Slash or inputObject.KeyCode == Enum.SpecialKey.ChatHotkey) then return \"No relavent key pressed\" elseif ChatMain.IsFocused() then return \"Chat bar already open\" elseif not icon.enabled then return \"Icon disabled\" end ChatMain:FocusChatBar(true) icon:select() end)) -- ChatActive icon._fakeChatMaid:give(ChatMain.VisibilityStateChanged:Connect(function(visibility) if not icon.ignoreVisibilityStateChange then if visibility == true then icon:select() else icon:deselect() end end end)) -- Keep when other icons selected icon.deselectWhenOtherIconSelected = false -- Mimic chat notifications icon._fakeChatMaid:give(ChatMain.MessagesChanged:connect(function() if ChatMain:GetVisibility() == true then return \"ChatWindow was open\" end icon:notify(icon.selected) end)) -- Mimic visibility when StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, state) is called coroutine.wrap(function() runService.Heartbeat:Wait() icon._fakeChatMaid:give(ChatMain.CoreGuiEnabled:connect(function(newState) if icon.ignoreVisibilityStateChange then return \"ignoreVisibilityStateChange enabled\" end local topbarEnabled = starterGui:GetCore(\"TopbarEnabled\") if topbarEnabled ~= IconController.previousTopbarEnabled then return \"SetCore was called instead of SetCoreGuiEnabled\" end if not icon.enabled and userInputService:IsKeyDown(Enum.KeyCode.LeftShift) and userInputService:IsKeyDown(Enum.KeyCode.P) then icon:setEnabled(true) else setIconEnabled(newState) end end)) end)() icon.deselected:Connect(function() displayChatBar(false) end) icon.selected:Connect(function() displayChatBar(true) end) setIconEnabled(starterGui:GetCoreGuiEnabled(\"Chat\"))","title":"instances.iconButton.MouseButton1Click:Connect(function()"}]}