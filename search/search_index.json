{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#about","title":"About","text":"<p>TopbarPlus is a module enabling the construction of dynamic topbar icons. These icons can be enhanced with features and methods like themes, dropdowns and menus to expand upon their appearance and behaviour.</p> <p>TopbarPlus fully supports PC, Mobile, Tablet and Gamepads (Consoles), and comes with internal features such as 'overflows' to ensure icons remain within suitable bounds.</p>"},{"location":"#construction","title":"Construction","text":"<p>Creating an icon is as simple as:</p> <pre><code>-- Within a LocalScript in StarterPlayerScripts and assuming the Icon package is placed in ReplicatedStorage\nlocal Icon = require(game:GetService(\"ReplicatedStorage\").Icon)\nlocal icon = Icon.new()\n</code></pre> <p>This constructs an empty <code>32x32</code> icon on the topbar.</p> <p>Info</p> <p>The order icons appear are determined by their construction sequence. Icons constructed first will have a smaller order therefore will appear left of icons with a higher order. You can modify this behaviour using icon:setOrder. Icon orders by default are <code>1+(totalCreatedIcons*0.01)</code>, so 1.01, 1.02, 1.03, etc.</p> <p>To add an image and label, do: <pre><code>icon:setImage(imageId)\nicon:setLabel(\"Label\")\n</code></pre></p>"},{"location":"#chaining","title":"Chaining","text":"<p>These methods are 'chainable' therefore can alternatively be called doing: <pre><code>Icon.new()\n    :setImage(imageId)\n    :setLabel(\"Label\")\n</code></pre></p> <p>You may want to act upon nested icons. You can achieve this using <code>:call</code> which returns the icon as the first argument within the function you pass: <pre><code>Icon.new()\n    :setName(\"TestIcon\")\n    :call(function(icon)\n        print(icon.name)\n        -- This will print 'TestIcon'!\n    end)\n</code></pre></p> <p>Info</p> <p>Chainable methods have a <code>chainable</code> tag next to their name within the API Icon docs.</p>"},{"location":"#states","title":"States","text":"<p>Sometimes you'll want an item to appear only when deselected and similarily only when selected. You can achieve this by specifying a string value within the <code>iconState</code> parameter of methods containing the <code>toggleable</code> tag. These are:</p> <pre><code>\"Deselected\" -- Applies the value when the icon is deselected (i.e. not pressed)\n\"Selected\" -- Applies the value when the icon is selected (i.e. pressed)\n\"Viewing\" -- Formerly known as Hovering, applies the value when a cursor is hovering above, a controller highlighting, or touchpad (mobile) long-pressing (but before releasing) an icon\n</code></pre> <p>Info</p> <p>If no <code>iconState</code> is specified (i.e. is nil) the value will be applied to all states.</p> <pre><code>-- It doesn't matter if you do \"deselected\", \"Deselected\" or \"dEsElEcTeD\"; iconStates are not case sensitive\nIcon.new()\n    :setImage(4882429582)\n    :setLabel(\"Closed\", \"Deselected\")\n    :setLabel(\"Open\", \"Selected\")\n    :setLabel(\"Viewing\", \"Viewing\")\n</code></pre> <p></p>"},{"location":"#additional","title":"Additional","text":"<p>By default icons will deselect when another icon is selected. You can disable this behaviour doing: <pre><code>icon:autoDeselect(false)\n</code></pre></p> <p>You can enhance icons further with features like modifyTheme, dropdowns and menus, or by binding GuiObjects and KeyCodes to their toggle. This and much more can be achieved by exploring the Feature Guide and Icon API.</p> <p>Have a question or issue? Feel free to reach out at the TopbarPlus DevForum Thread.</p>"},{"location":"api/","title":"API","text":""},{"location":"api/#functions","title":"Functions","text":""},{"location":"api/#geticons","title":"getIcons","text":"<p><pre><code>local icons = Icon.getIcons()\n</code></pre> Returns a dictionary of icons where the key is the icon's UID and value the icon.</p>"},{"location":"api/#geticon","title":"getIcon","text":"<p><pre><code>local icon = Icon.getIcon(nameOrUID)\n</code></pre> Returns an icon of the given name or UID.</p>"},{"location":"api/#settopbarenabled","title":"setTopbarEnabled","text":"<p><pre><code>Icon.setTopbarEnabled(bool)\n</code></pre> When set to <code>false</code> all TopbarPlus ScreenGuis are hidden. This does not impact Roblox's Topbar.</p>"},{"location":"api/#modifybasetheme","title":"modifyBaseTheme","text":"<p><pre><code>Icon.modifyBaseTheme(modifications)\n</code></pre> Updates the appearance of all icons. See themes for more details.</p>"},{"location":"api/#setdisplayorder","title":"setDisplayOrder","text":"<p><pre><code>Icon.setDisplayOrder(integer)\n</code></pre> Sets the base DisplayOrder of all TopbarPlus ScreenGuis.</p>"},{"location":"api/#constructors","title":"Constructors","text":""},{"location":"api/#new","title":"new","text":"<p><pre><code>local icon = Icon.new()\n</code></pre> Constructs an empty <code>32x32</code> icon on the topbar.</p>"},{"location":"api/#methods","title":"Methods","text":""},{"location":"api/#setname","title":"setName","text":"<p>{chainable} <pre><code>icon:setName(name)\n</code></pre> Sets the name of the Widget instance. This can be used in conjunction with <code>Icon.getIcon(name)</code>.</p>"},{"location":"api/#getinstance","title":"getInstance","text":"<p><pre><code>local instance = icon:getInstance(instanceName)\n</code></pre> Returns the first descendant found within the widget of name <code>instanceName</code>.</p>"},{"location":"api/#modifytheme","title":"modifyTheme","text":"<p>{chainable} <pre><code>icon:modifyTheme(modifications)\n</code></pre> Updates the appearance of the icon. See themes for more details.</p>"},{"location":"api/#modifychildtheme","title":"modifyChildTheme","text":"<p>{chainable} <pre><code>icon:modifyChildTheme(modifications)\n</code></pre> Updates the appearance of all icons that are parented to this icon (for example when a menu or dropdown). See themes for more details.</p>"},{"location":"api/#setenabled","title":"setEnabled","text":"<p>{chainable} <pre><code>icon:setEnabled(bool)\n</code></pre> When set to <code>false</code> the icon will be disabled and hidden.</p>"},{"location":"api/#select","title":"select","text":"<p>{chainable} <pre><code>icon:select()\n</code></pre> Selects the icon (as if it were clicked once).</p>"},{"location":"api/#deselect","title":"deselect","text":"<p>{chainable} <pre><code>icon:deselect()\n</code></pre> Deselects the icon (as if it were clicked, then clicked again).</p>"},{"location":"api/#notify","title":"notify","text":"<p>{chainable} <pre><code>icon:notify(clearNoticeEvent)\n</code></pre> Prompts a notice bubble which accumulates the further it is prompted. If the icon belongs to a dropdown or menu, then the notice will appear on the parent icon when the parent icon is deselected.</p>"},{"location":"api/#clearnotices","title":"clearNotices","text":"<p>{chainable} <pre><code>icon:clearNotices()\n</code></pre></p>"},{"location":"api/#disableoverlay","title":"disableOverlay","text":"<p>{chainable} <pre><code>icon:disableStateOverlay(bool)\n</code></pre> When set to <code>true</code>, disables the shade effect which appears when the icon is pressed and released.</p>"},{"location":"api/#setimage","title":"setImage","text":"<p>{chainable} {toggleable} <pre><code>icon:setImage(imageId, iconState)\n</code></pre> Applies an image to the icon based on the given <code>imageId</code>. <code>imageId</code> can be an assetId or a complete asset string.</p>"},{"location":"api/#setlabel","title":"setLabel","text":"<p>{chainable} {toggleable} <pre><code>icon:setLabel(text, iconState)\n</code></pre></p>"},{"location":"api/#setorder","title":"setOrder","text":"<p>{chainable} {toggleable} <pre><code>icon:setOrder(order, iconState)\n</code></pre></p>"},{"location":"api/#setcornerradius","title":"setCornerRadius","text":"<p>{chainable} {toggleable} <pre><code>icon:setCornerRadius(scale, offset, iconState)\n</code></pre></p>"},{"location":"api/#align","title":"align","text":"<p>{chainable} <pre><code>icon:align(alignment)\n</code></pre> This enables you to set the icon to the <code>\"Left\"</code> (default), <code>\"Center\"</code> or <code>\"Right\"</code> side of the screen. See alignments for more details.</p>"},{"location":"api/#setwidth","title":"setWidth","text":"<p>{chainable} {toggleable} <pre><code>icon:setWidth(minimumSize, iconState)\n</code></pre> This sets the minimum width the icon can be (it can be larger for instance when setting a long label). The default width is <code>44</code>.</p>"},{"location":"api/#setimagescale","title":"setImageScale","text":"<p>{chainable} {toggleable} <pre><code>icon:setImageScale(number, iconState)\n</code></pre> How large the image is relative to the icon. The default value is <code>0.5</code>.</p>"},{"location":"api/#setimageratio","title":"setImageRatio","text":"<p>{chainable} {toggleable} <pre><code>icon:setImageRatio(number, iconState)\n</code></pre> How stretched the image will appear. The default value is <code>1</code> (a perfect square).</p>"},{"location":"api/#settextsize","title":"setTextSize","text":"<p>{chainable} {toggleable} <pre><code>icon:setTextSize(number, iconState)\n</code></pre> The size of the icon labels' text. The default value is <code>16</code>.</p>"},{"location":"api/#settextfont","title":"setTextFont","text":"<p>{chainable} {toggleable} <pre><code>icon:setTextFont(font, fontWeight, fontStyle, iconState)\n</code></pre> Sets the labels FontFace. <code>font</code> can be a font family name (such as <code>\"Creepster\"</code>), a font enum (such as <code>Enum.Font.Bangers</code>), a font ID (such as <code>12187370928</code>) or font family link (such as <code>\"rbxasset://fonts/families/Sarpanch.json\"</code>).</p>"},{"location":"api/#bindtoggleitem","title":"bindToggleItem","text":"<p>{chainable} <pre><code>icon:bindToggleItem(guiObjectOrLayerCollector)\n</code></pre> Binds a GuiObject or LayerCollector to appear and disappeared when the icon is toggled.</p>"},{"location":"api/#unbindtoggleitem","title":"unbindToggleItem","text":"<p>{chainable} <pre><code>icon:unbindToggleItem(guiObjectOrLayerCollector)\n</code></pre> Unbinds the given GuiObject or LayerCollector from the toggle.</p>"},{"location":"api/#bindevent","title":"bindEvent","text":"<p>{chainable} <pre><code>icon:bindEvent(iconEventName, callback)\n</code></pre> Connects to an icon event with <code>iconEventName</code>. It's important to remember all event names are in camelCase. <code>callback</code> is called with arguments <code>(self, ...)</code> when the event is triggered.</p>"},{"location":"api/#unbindevent","title":"unbindEvent","text":"<p>{chainable} <pre><code>icon:unbindEvent(iconEventName)\n</code></pre> Unbinds the connection of the associated <code>iconEventName</code>.</p>"},{"location":"api/#bindtogglekey","title":"bindToggleKey","text":"<p>{chainable} <pre><code>icon:bindToggleKey(keyCodeEnum)\n</code></pre> Binds a keycode which toggles the icon when pressed. See toggle keys for more details.</p>"},{"location":"api/#unbindtogglekey","title":"unbindToggleKey","text":"<p>{chainable} <pre><code>icon:unbindToggleKey(keyCodeEnum)\n</code></pre> Unbinds the given keycode.</p>"},{"location":"api/#call","title":"call","text":"<p>{chainable} <pre><code>icon:call(func)\n</code></pre> Calls the function immediately via <code>task.spawn</code>. The first argument passed is the icon itself. This is useful when needing to extend the behaviour of an icon while remaining in the chain.</p>"},{"location":"api/#addtojanitor","title":"addToJanitor","text":"<p>{chainable} <pre><code>icon:addToJanitor(userdata)\n</code></pre> Passes the given userdata to the icons janitor to be destroyed/disconnected on the icons destruction. If a function is passed, it will be called when the icon is destroyed.</p>"},{"location":"api/#lock","title":"lock","text":"<p>{chainable} <pre><code>icon:lock()\n</code></pre> Prevents the icon being toggled by user-input (such as clicking) however the icon can still be toggled via localscript using methods such as <code>icon:select()</code>.</p>"},{"location":"api/#unlock","title":"unlock","text":"<p>{chainable} <pre><code>icon:unlock()\n</code></pre> Re-enables user-input to toggle the icon again.</p>"},{"location":"api/#debounce","title":"debounce","text":"<p>{chainable} {yields} <pre><code>icon:debounce(seconds)\n</code></pre> Locks the icon, yields for the given time, then unlocks the icon, effectively shorthand for <code>icon:lock() task.wait(seconds) icon:unlock()</code>. This is useful for applying cooldowns (to prevent an icon from being pressed again) after an icon has been selected or deselected. </p>"},{"location":"api/#autodeselect","title":"autoDeselect","text":"<p>{chainable} <pre><code>icon:autoDeselect(true)\n</code></pre> When set to <code>true</code> (the default) the icon is deselected when another icon (with autoDeselect enabled) is pressed. Set to <code>false</code> to prevent the icon being deselected when another icon is selected (a useful behaviour in dropdowns).</p>"},{"location":"api/#oneclick","title":"oneClick","text":"<p>{chainable} <pre><code>icon:oneClick(bool)\n</code></pre> When set to true the icon will automatically deselect when selected. This creates the effect of a single click button.</p>"},{"location":"api/#setcaption","title":"setCaption","text":"<p>{chainable} <pre><code>icon:setCaption(text)\n</code></pre> Sets a caption. To remove, pass <code>nil</code> as <code>text</code>. See captions for more details.</p>"},{"location":"api/#setcaptionhint","title":"setCaptionHint","text":"<p>{chainable} <pre><code>icon:setCaptionHint(keyCodeEnum)\n</code></pre> This customizes the appearance of the caption's hint without having to use <code>icon:bindToggleKey</code>. </p>"},{"location":"api/#setdropdown","title":"setDropdown","text":"<p>{chainable} <pre><code>icon:setDropdown(arrayOfIcons)\n</code></pre> Creates a vertical dropdown based upon the given <code>table array</code> of <code>icons</code>. Pass an empty table <code>{}</code> to remove the dropdown. See dropdowns for more details.</p>"},{"location":"api/#joindropdown","title":"joinDropdown","text":"<p>{chainable} <pre><code>icon:joinDropdown(parentIcon)\n</code></pre> Joins the dropdown of <code>parentIcon</code>. This is what <code>icon:setDropdown</code> calls internally on the icons within its array.</p>"},{"location":"api/#setmenu","title":"setMenu","text":"<p>{chainable} <pre><code>icon:setMenu(arrayOfIcons)\n</code></pre> Creates a horizontal menu based upon the given array of icons. Pass an empty table <code>{}</code> to remove the menu. See menus for more details.</p>"},{"location":"api/#joinmenu","title":"joinMenu","text":"<p>{chainable} <pre><code>icon:joinMenu(parentIcon)\n</code></pre> Joins the menu of <code>parentIcon</code>. This is what <code>icon:setMenu</code> calls internally on the icons within its array.</p>"},{"location":"api/#leave","title":"leave","text":"<p>{chainable} <pre><code>icon:leave()\n</code></pre> Unparents an icon from a parentIcon if it belongs to a dropdown or menu.</p>"},{"location":"api/#convertlabeltonumberspinner","title":"convertLabelToNumberSpinner","text":"<p>{chainable} <pre><code>icon:convertLabelToNumberSpinner(numberSpinner)\n</code></pre> Accepts a numberSpinner and converts the icon's label into that spinner. For example: <pre><code>Icon.new()\n    :align(\"Right\")\n    :setLabel(\"Points\")\n    :setWidth(80)\n    :call(function(pointsIcon)\n        local NumberSpinner = require(ReplicatedStorage.NumberSpinner)\n        local numberSpinner = NumberSpinner.new()\n        pointsIcon:convertLabelToNumberSpinner(numberSpinner)\n        numberSpinner.Name = \"LabelSpinner\"\n        numberSpinner.Prefix = \"$\"\n        numberSpinner.Commas = true\n        numberSpinner.Decimals = 0\n        numberSpinner.Duration = 0.25\n        while true do\n            numberSpinner.Value = math.random(1,1000)\n            task.wait(1)\n        end\n    end)\n</code></pre></p>"},{"location":"api/#destroy","title":"destroy","text":"<p>{chainable} <pre><code>icon:destroy()\n</code></pre> Clears all connections and destroys all instances associated with the icon.</p>"},{"location":"api/#events","title":"Events","text":""},{"location":"api/#selected","title":"selected","text":"<pre><code>icon.selected:Connect(function(fromSource)\n    -- fromSource can be useful for checking if the behaviour was triggered by a user (such as clicking)\n    -- fromSource values include \"User\", \"OneClick\", \"AutoDeselect\", \"HideParentFeature\", \"Overflow\"\n    local sourceName = fromSource or \"Unknown\"\n    print(\"The icon was selected by the \"..sourceName)\nend)\n</code></pre>"},{"location":"api/#deselected","title":"deselected","text":"<pre><code>icon.deselected:Connect(function(fromSource)\n    local sourceName = fromSource or \"Unknown\"\n    print(\"The icon was deselected by the \"..sourceName)\nend)\n</code></pre>"},{"location":"api/#toggled","title":"toggled","text":"<pre><code>icon.toggled:Connect(function(isSelected, fromSource)\n    local stateName = (isSelected and \"selected\") or \"deselected\"\n    print(`The icon was {stateName}!`)\nend)\n</code></pre>"},{"location":"api/#viewingstarted","title":"viewingStarted","text":"<pre><code>icon.viewingStarted:Connect(function()\n    print(\"A mouse, long-pressed finger or gamepad selection is hovering over the icon\")\nend)\n</code></pre>"},{"location":"api/#viewingended","title":"viewingEnded","text":"<pre><code>icon.viewingEnded:Connect(function()\n    print(\"The input is no longer viewing (hovering over) the icon\")\nend)\n</code></pre>"},{"location":"api/#notified","title":"notified","text":"<pre><code>icon.notified:Connect(function()\n    print(\"New notice\")\nend)\n</code></pre>"},{"location":"api/#properties","title":"Properties","text":""},{"location":"api/#name","title":"name","text":"<p>{read-only} <pre><code>local string = icon.name --[default: \"Widget\"]\n</code></pre></p>"},{"location":"api/#isselected","title":"isSelected","text":"<p>{read-only} <pre><code>local bool = icon.isSelected\n</code></pre></p>"},{"location":"api/#isenabled","title":"isEnabled","text":"<p>{read-only} <pre><code>local bool = icon.isEnabled\n</code></pre></p>"},{"location":"api/#totalnotices","title":"totalNotices","text":"<p>{read-only} <pre><code>local int = icon.totalNotices\n</code></pre></p>"},{"location":"api/#locked","title":"locked","text":"<p>{read-only} <pre><code>local bool = icon.locked\n</code></pre></p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#bug-reports","title":"Bug Reports","text":"<ul> <li>To submit a bug report, open an issue or create a response at the discussion thread.</li> <li>Ensure your report includes a detailed explanation of the problem with any relavent images, videos, etc (such as console errors).</li> <li>Aim to include a link to a stipped-down uncopylocked Roblox place which reproduces the bug.</li> </ul>"},{"location":"contributing/#questions-and-feedback","title":"Questions and Feedback","text":"<ul> <li>Be sure to first check out the documentation before asking a question.</li> <li>We recommend asking all questions and posting feedback to the discussion thread.</li> </ul>"},{"location":"contributing/#submitting-a-resource-video-tutorial-port-etc","title":"Submitting a resource (video tutorial, port, etc)","text":"<ul> <li>Fancy making a tutorial or resource for TopbarPlus? Feel free to get in touch and we can provide tips, best practices, etc.</li> <li>We'll feature approved resources on the discussion thread.</li> <li>To submit a resource, open an issue, or reach out on the discussion thread or to ForeverHD on the devforum.</li> </ul>"},{"location":"contributing/#suggestions-and-code","title":"Suggestions and Code","text":"<ul> <li>TopbarPlus is completely free and open source; any suggestions and code contributions are greatly appreciated!</li> <li>To make a suggestion, open an issue or create a response at the discussion thread.</li> <li>For large contributions (like a new feature) please open an issue before beginning a code contribution to ensure it's discussed through fully (we wouldn't want to waste your time!).</li> <li>For smaller contributions (a few lines of code, fixing typos, etc) feel free to send a pull request right away.</li> <li>Make sure to merge your pull requests into the #development branch.</li> <li>Some tools you'll find useful when working on this project:<ul> <li>Rojo</li> <li>Material for MKDocs</li> <li>Roblox LSP</li> </ul> </li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>If you find any problems in the documentation, including typos, bad grammar, misleading phrasing, or missing content, feel free to file issues and pull requests to fix them.</li> <li>To test documentation:<ol> <li>Install Python (which comes with pip).</li> <li>Install Material for MKDocs.</li> <li>Visit the TopbarPlus repository.</li> <li>Click Fork in the top right corner.</li> <li>Clone this fork into your local repository.</li> <li>Change directory to this clone <code>cd TopbarPlus</code>.</li> <li>Swap to the development branch <code>git checkout development</code>.</li> <li>Call <code>mkdocs serve</code> within your terminal.</li> <li>Open your local website (it will look something like <code>http://0.0.0.0:8000</code>)</li> <li>Any changes to <code>mkdocs.yml</code> or the files within <code>docs</code> will now update live to this local site.</li> </ol> </li> </ul> <p>Important</p> <p>All pull requests must be made to the development branch.</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#images","title":"Images","text":"<pre><code>Icon.new:setImage(shopImageId)\n</code></pre>"},{"location":"features/#labels","title":"Labels","text":"<pre><code>icon:setLabel(\"Shop\")\n</code></pre> <pre><code>icon:setImage(shopImageId)\nicon:setLabel(\"Shop\")\n</code></pre>"},{"location":"features/#alignments","title":"Alignments","text":"<pre><code>-- Aligns the icon to the left bounds of the screen\n-- This is the default behaviour so you do not need to do anything\n-- This was formerly called :setLeft()\nicon:align(\"Left\")\n</code></pre> <pre><code>-- Aligns the icon in the middle of the screen\n-- This was formerly called :setMid()\nicon:align(\"Center\")\n</code></pre> <pre><code>-- Aligns the icon to the right bounds of the screen\n-- This was formerly called :setRight()\nicon:align(\"Right\")\n</code></pre>"},{"location":"features/#notices","title":"Notices","text":"<pre><code>icon:notify()\n</code></pre>"},{"location":"features/#captions","title":"Captions","text":"<pre><code>icon:setCaption(\"Open Shop\")\n</code></pre>"},{"location":"features/#dropdowns","title":"Dropdowns","text":"<p>Dropdowns are vertical navigation frames that contain an array of icons:</p> <pre><code>Icon.new()\n    :setLabel(\"Example\")\n    :modifyTheme({\"Dropdown\", \"MaxIcons\", 3})\n    :modifyChildTheme({\"Widget\", \"MinimumWidth\", 158})\n    :setDropdown({\n        Icon.new()\n            :setLabel(\"Category 1\")\n        ,\n        Icon.new()\n            :setLabel(\"Category 2\")\n        ,\n        Icon.new()\n            :setLabel(\"Category 3\")\n        ,\n        Icon.new()\n            :setLabel(\"Category 4\")\n        ,\n    })\n</code></pre> <p></p> <p>Warning</p> <p>Icons containing a dropdown can join other menus but not dropdowns.</p>"},{"location":"features/#menus","title":"Menus","text":"<p>Menus are horizontal navigation frames that contain an array of icons:</p> <pre><code>Icon.new()\n    :setLabel(\"Example\")\n    :modifyTheme({\"Menu\", \"MaxIcons\", 2})\n    :setMenu({\n        Icon.new()\n            :setLabel(\"Item 1\")\n        ,\n        Icon.new()\n            :setLabel(\"Item 2\")\n        ,\n        Icon.new()\n            :setLabel(\"Item 3\")\n        ,\n        Icon.new()\n            :setLabel(\"Item 4\")\n        ,\n    })\n</code></pre> <p></p>"},{"location":"features/#modify-theme","title":"Modify Theme","text":"<p>You can modify the appearance of an icon doing: <pre><code>icon:modifyTheme(modifications)\n</code></pre></p> <p>You can modify the appearance of all icons doing: <pre><code>Icon.modifyBaseTheme(modifications)\n</code></pre></p> <p><code>modifications</code> can be either a single array describing a change, or a colllection of these arrays. For example, both the following are valid: <pre><code>-- Single array\nicon:modifyTheme({\"IconLabel\", \"TextSize\", 16})\n\n-- Collection of arrays\nicon:modifyTheme({\n    {\"Widget\", \"MinimumWidth\", 290},\n    {\"IconCorners\", \"CornerRadius\", UDim.new(0, 0)}\n})\n</code></pre></p> <p>A modification array has 4 components: <pre><code>{name, property, value, iconState}\n</code></pre></p> <p>1. <code>name</code> {required}</p> <p>This can be:</p> <ul> <li>\"Widget\" (which is the icon container frame)</li> <li>The name of an instance within the widget such as <code>IconGradient</code>, <code>IconSpot</code>, <code>Menu</code>, etc</li> <li>A 'collective' - the value of an attribute called 'Collective' applied to some instances. This enables them to be acted upon all at once. For example, 'IconCorners'.</li> </ul> <p>2. <code>property</code> {required}</p> <p>This can be either:</p> <ul> <li>A property from the instance (Name, BackgroundColor3, Text, etc)</li> <li>Or if the property doesn't exist, an attribute of that property name will be set</li> </ul> <p>3. <code>value</code> {required}</p> <p>The value you want the property to become (<code>\"Hello\"</code>, <code>Color3.fromRGB(255, 100, 50)</code>, etc)</p> <p>4. <code>iconState</code> {optional}</p> <p>This determines when the modification is applied. See icon states for more details.</p> <p>You can find example arrays under the 'Default' module:</p> <p></p>"},{"location":"features/#one-click-icons","title":"One Click Icons","text":"<p>You can convert icons into single click icons (icons which instantly deselect when selected) by doing: <pre><code>icon:oneClick()\n</code></pre></p> <p>For example: <pre><code>Icon.new()\n    :setImage(shopImageId)\n    :setLabel(\"Shop\")\n    :bindEvent(\"deselected\", function()\n        shop.Visible = not shop.Visible\n    end)\n    :oneClick()\n</code></pre></p> <p></p>"},{"location":"features/#toggle-items","title":"Toggle Items","text":"<p>Binds a GuiObject (such as a frame) to appear or disappear when the icon is toggled <pre><code>icon:bindToggleItem(shopFrame)\n</code></pre></p> <p>It is equivalent to doing: <pre><code>icon.deselected:Connect(function()\n    shopFrame.Visible = false\nend)\nicon.selected:Connect(function()\n    shopFrame.Visible = true\nend)\n</code></pre></p>"},{"location":"features/#toggle-keys","title":"Toggle Keys","text":"<p>Binds a keycode which toggles the icon when pressed. Also creates a caption hint of that keycode binding. <pre><code>Icon.new()\n    :setLabel(\"Shop\")\n    :bindToggleKey(Enum.KeyCode.V)\n    :setCaption(\"Open Shop\")\n</code></pre></p> <p></p>"},{"location":"features/#gamepad-console-support","title":"Gamepad &amp; Console Support","text":"<p>TopbarPlus comes with inbuilt support for gamepads (such as Xbox and PlayStation controllers) and console screens:</p> <p></p> <p>To highlight the last-selected icon (or left-most if none have been selected yet) users simply press DPadUp or navigate to the topbar via the virtual cursor. To change the default trigger keycode (from DPadUp) do: <pre><code>Icon.highlightKey = Enum.KeyCode.NEW_KEYCODE\n</code></pre></p>"},{"location":"features/#overflows","title":"Overflows","text":"<p>When accounting for device types and screen sizes, icons may occasionally overlap. This is especially common for phones when they enter portrait mode. TopbarPlus solves this with overflows:</p> <p></p> <p>Overflows will appear when left-set or right-set icons exceed the boundary of the closest opposite-aligned icon or viewport.</p> <p>If a center-aligned icon exceeds the bounds of another icon, its alignment will be set to the alignment of the icon it exceeded:</p> <p></p> <p>These examples and more can be tested, viewed and edited at the v3 Playground.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#take-the-model","title":"Take the model","text":"<p>{recommended}</p> <ol> <li>Take the TopbarPlus model.</li> <li>Open the toolbox and navigate to Inventory -&gt; My Models.</li> <li>Click TopbarPlus to insert into your game and place anywhere within <code>ReplicatedStorage</code> or <code>Workspace</code>. </li> <li> <p>TopbarPlus is a package so you can update it instantly (instead of re-adding) by right-clicking the Icon module and selecting an option such as 'Get Latest Package':</p> <p></p> </li> <li> <p>You can receive automatic updates by enabling 'AutoUpdate' within the PackageLink:</p> <p></p> </li> </ol> <p>Info</p> <p>All v3 updates will be backwards compatible so you don't need to worry about updates interfering with your code.</p> <p>Warning</p> <p>Try not to modify any code within the Icon package otherwise it will break the package link.</p> <p>Important</p> <p>As of 7th June 2025 public packages haven't been rolled out by Roblox. Only after their full release will you be able to benefit from easily installable updates. For the time being, attempting to use 'Get Latest Package' and other package features will throw an error.</p>"},{"location":"installation/#download-from-releases","title":"Download from Releases","text":"<ol> <li>Visit the latest release.</li> <li>Under Assets, download <code>TopbarPlus.rbxm</code>.</li> <li>Within studio, navigate to MODEL -&gt; Model and insert the file anywhere within <code>ReplicatedStorage</code>. </li> </ol>"},{"location":"installation/#with-rojo","title":"With Rojo","text":"<ol> <li>Setup with Rojo.</li> <li>Visit the TopbarPlus repository.</li> <li>Click Fork in the top right corner.</li> <li>Clone this fork into your local repository.</li> <li>Modify the <code>serve.project.json</code> file to your desired location (by default TopbarPlus is built directly into <code>Workspace</code>).</li> <li>Call <code>rojo serve</code> (terminal or VSC plugin) and connect to the rojo studio plugin.</li> </ol>"},{"location":"installation/#with-wally","title":"With Wally","text":"<p>TopbarPlus is now on Wally! You can find it here.</p>"},{"location":"third_parties/","title":"Third Parties","text":"<p>TopbarPlus supports the use of multiple Icon packages within a single experience assuming all required packages are <code>v3.0.0</code> or above.</p> <p>When a package is required it will 'check' to see if a TopbarPlus package has already been required within the experience. If one has, it cancels loading itself and will instead refer to the already initialized package.</p> <p>This prevents weird quirks from occuring and means third party applications, libraries etc that use TopbarPlus can be used safely without interferring with your own implementation of TopbarPlus.</p> <p>You don't have to do anything to support multiple packages. Simply use TopbarPlus as normal.</p>"}]}