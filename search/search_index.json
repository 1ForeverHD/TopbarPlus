{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TopbarPlus is a module enabling the construction of dynamic topbar icons. These icons can be enhanced with features and methods like themes, dropdowns and menus to expand upon their appearance and behaviour. TopbarPlus fully supports PC, Mobile, Tablet and Console, and comes with internal features such as 'overflows' to ensure icons remain within suitable bounds. Creating an icon is as simple as: -- Within a LocalScript in StarterPlayerScripts and assuming TopbarPlus is placed in ReplicatedStorage local Icon = require ( game : GetService ( \"ReplicatedStorage\" ). Icon ) local icon = Icon . new () Info The order icons appear are determined by their construction sequence. Icons constructed first will have a smaller order number, therefore will appear left of icons with a higher order. For instance, if you construct a shop icon then an inventory icon, the shop icon will appear furthest left. You can modify this behaviour using icon:setOrder . This constructs an empty 32x32 icon on the topbar. To add an image and label, do: icon : setImage ( imageId ) icon : setLabel ( \"Label\" ) These methods are 'chainable' therefore can alternatively be called by doing: Icon . new () : setImage ( imageId ) : setLabel ( \"Label\" ) You may want to act upon nested icons. You can achieve this using :call which returns the icon as the first argument within the function you pass: Icon . new () : setName ( \"TestIcon\" ) : call ( function ( icon ) print ( icon . name ) -- This will print 'TestIcon'! end ) Info Chainable methods have a chainable tag next to their name within the API Icon docs. Sometimes you'll want an item to appear only when deselected , and similarily only when selected . You can achieve this by specifying a string value within the iconState parameter of methods containing the toggleable tag. These are: \"Deselected\" -- Applies the value when the icon is deselected (i.e. not pressed) \"Selected\" -- Applies the value when the icon is selected (i.e. pressed) \"Viewing\" -- Formerly known as Hovering, applies the value when a cursor is hovering above, a controller highlighting, or touchpad (mobile) long-pressing (but before releasing) an icon Info If no argument is specified, the value will be applied to all states Icon . new () : setImage ( 4882429582 ) : setLabel ( \"Closed\" , \"deselected\" ) : setLabel ( \"Open\" , \"selected\" ) : setLabel ( \"Viewing\" , \"viewing\" ) By default icons will deselect when another icon is selected. You can disable this behaviour doing: icon : autoDeselect ( false ) You can enhance icons further with features like modifyTheme, dropdowns and menus, or by binding GuiObjects and KeyCodes to their toggle. This and much more can be achieved by exploring the Feature Guide and Icon API . Have a question or issue? Feel free to reach out at the TopbarPlus DevForum Thread .","title":"Introduction"},{"location":"api/","text":"Functions \u00b6 new \u00b6 local icon = Icon . new () Constructs an empty 32x32 icon on the topbar. Constructors \u00b6 new \u00b6 local icon = Icon . new () Constructs an empty 32x32 icon on the topbar. Methods \u00b6 set \u00b6 {chainable} icon : set ( settingName , value , iconState ) Applies a specific setting to an icon. All settings can be found here . If the setting falls under the 'toggleable' category then an iconState can be specified. For most scenarious it's recommended instead to apply settings using themes . get \u00b6 local value = icon : get ( settingName , iconState ) Retrieves the given settings value. If the setting falls under the 'toggleable' category then an iconState can be specified. getToggleState \u00b6 local selectedOrDeselectedString = icon : getToggleState () Returns the current toggleState, either \"deselected\" or \"selected\". setTheme \u00b6 {chainable} icon : setTheme ( theme ) Applies a theme to the given icon. See themes for more information. setEnabled \u00b6 {chainable} icon : setEnabled ( bool ) When set to false , the icon will be disabled and hidden. setName \u00b6 {chainable} icon : setName ( string ) Associates the given name to the icon which enables it to be retrieved with IconController.getIcon(name) . setProperty \u00b6 {chainable} icon : setProperty ( propertyName , value ) An alternative way of doing zone[propertyName] = value . This enables the easy-configuration of icon properties within chained methods. select \u00b6 {chainable} icon : select () Selects the icon (as if it were clicked once). deselect \u00b6 {chainable} icon : deselect () Deselects the icon (as if it were clicked, then clicked again). notify \u00b6 {chainable} icon : notify ( clearNoticeEvent ) Prompts a notice bubble which accumulates the further it is prompted. If the icon belongs to a dropdown or menu, then the notice will appear on the parent icon when the parent icon is deselected. clearNotices \u00b6 {chainable} icon : clearNotices () disableStateOverlay \u00b6 {chainable} icon : disableStateOverlay ( bool ) When set to true , disables the shade effect which appears when the icon is pressed and released. convertLabelToNumberSpinner \u00b6 {chainable} icon : convertLabelToNumberSpinner ( numberSpinner ) Takes a NumberSpinner object (by boatbomber) and converts it into the icons label. Example usage: Icon . new () : setName ( \"CashSpinnerIcon\" ) : setRight () : lock () : setSize ( 100 , 32 ) : give ( function ( icon ) local NumberSpinner = require ( replicatedStorage . NumberSpinner ) local labelSpinner = NumberSpinner . new () icon : convertLabelToNumberSpinner ( labelSpinner ) labelSpinner . Name = \"LabelSpinner\" labelSpinner . Decimals = 3 labelSpinner . Duration = 0.25 coroutine.wrap ( function () while wait ( 0.5 ) do labelSpinner . Value = math.random ( 100000 ) / 1000 end end )() end ) setImage \u00b6 {chainable} {toggleable} icon : setImage ( imageId , iconState ) Applies an image to the icon based on the given imaageId . imageId can be an assetId or a complete asset string. setLabel \u00b6 {chainable} {toggleable} icon : setLabel ( text , iconState ) setOrder \u00b6 {chainable} {toggleable} icon : setOrder ( order , iconState ) setCornerRadius \u00b6 {chainable} {toggleable} icon : setCornerRadius ( scale , offset , iconState ) setLeft \u00b6 {chainable} {toggleable} icon : setLeft ( iconState ) setMid \u00b6 {chainable} {toggleable} icon : setMid ( iconState ) setRight \u00b6 {chainable} {toggleable} icon : setRight ( iconState ) setImageYScale \u00b6 {chainable} {toggleable} icon : setImageYScale ( YScale , iconState ) Defines the proportional space the icons image takes up within the icons container. setImageRatio \u00b6 {chainable} {toggleable} icon : setImageRatio ( ratio , iconState ) Defines the x:y ratio dimensions as a number. By default ratio is 1.00 . setLabelYScale \u00b6 {chainable} {toggleable} icon : setLabelYScale ( YScale , iconState ) Defines how large label text appears.By default YScale is 0.45 . setBaseZIndex \u00b6 {chainable} {toggleable} icon : setBaseZIndex ( ZIndex , iconState ) Calculates the difference between the existing baseZIndex (i.e. instances.iconContainer.ZIndex ) and new value, then updates the ZIndex of all objects within the icon accoridngly using this difference. setSize \u00b6 {chainable} {toggleable} icon : setSize ( XOffset , YOffset , iconState ) Determines the icons container size. By default XOffset and YOffset are 32 . setXSize \u00b6 {chainable} {toggleable} icon : setXSize ( XOffset , iconState ) Same as icon:setSize except only for the X Offset (the Y offset is generated automatically). setYSize \u00b6 {chainable} {toggleable} icon : setYSize ( XOffset , iconState ) Same as icon:setSize except only for the Y Offset (the X offset is generated automatically). bindToggleItem \u00b6 {chainable} icon : bindToggleItem ( guiObjectOrLayerCollector ) Binds a GuiObject or LayerCollector to appear and disappeared when the icon is toggled. unbindToggleItem \u00b6 {chainable} icon : unbindToggleItem ( guiObjectOrLayerCollector ) Unbinds the given GuiObject or LayerCollector from the toggle. bindEvent \u00b6 {chainable} icon : bindEvent ( iconEventName , eventFunction ) Connects to an icon event based upon the given iconEventName and call eventFunction with arguments (self, ...) when the event is triggered. unbindEvent \u00b6 {chainable} icon : unbindEvent ( iconEventName ) Unbinds the connection of the associated iconEventName . bindToggleKey \u00b6 {chainable} icon : bindToggleKey ( keyCodeEnum ) Binds a keycode which toggles the icon when pressed. unbindToggleKey \u00b6 {chainable} icon : unbindToggleKey ( keyCodeEnum ) Unbinds the given keycode. call \u00b6 {chainable} icon : call ( func ) Calls the function as a separate coroutine with the first argument being the icon itself. This is useful when needing to extend the behaviour of an icon while remaining in the chain. give \u00b6 {chainable} icon : give ( userdata ) Passes the given userdata to the Icons maid to be destroyed/disconnected on the icons destruction. If a function is passed, it will be executed right away with its self (the icon) being passed as the first argument. The return value is then given to the maid (instead of the function). lock \u00b6 {chainable} icon : lock () Prevents the icon being toggled by user-input (such as clicking) however the icon can still be toggled via localscript using methods such as icon:select() . unlock \u00b6 {chainable} icon : unlock () Re-enables user-input to toggle the icon again. debounce \u00b6 {chainable} {yields} icon : debounce ( seconds ) Locks the icon, yields for the given time, then unlocks the icon, effectively shorthand for icon:lock() task.wait(seconds) icon:unlock() . This is useful for applying cooldowns (to prevent an icon from being pressed again) after an icon has been selected or deselected. autoDeselect \u00b6 {chainable} icon : autoDeselect ( true ) When set to true (the default) the icon is deselected when another icon (with autoDeselect enabled) is pressed. Set to false to prevent the icon being deselected when another icon is selected (a useful behaviour in dropdowns). This is a shorthand alternative to doing icon:setProperty(\"deselectWhenOtherIconSelected\", true) . setTopPadding \u00b6 {chainable} icon : setTopPadding ( offset , scale ) The gap between the top of the screen and the icon. setTip \u00b6 {chainable} icon : setTip ( text ) Sets a tip. To remove, pass nil as text . setCaption \u00b6 {chainable} icon : setCaption ( text ) Sets a caption. To remove, pass nil as text . join \u00b6 {chainable} icon : join ( parentIcon , featureName ) Parents the icon to the given parentIcon under the specified feature, either \"dropdown\" or \"menu\". leave \u00b6 {chainable} icon : leave () Unparents an icon from a parentIcon if it belongs to a dropdown or menu. setDropdown \u00b6 {chainable} icon : setDropdown ( arrayOfIcons ) Creates a vertical dropdown based upon the given table array of icons . Pass an empty table {} to remove the dropdown. Dropdown settings can be configured using themes or the set method . setMenu \u00b6 {chainable} icon : setMenu ( arrayOfIcons ) Creates a horizontal menu based upon the given table array of icons . Pass an empty table {} to remove the menu. Menu settings can be configured using themes or the set method . destroy \u00b6 {chainable} icon : destroy () Clears all connections and destroys all instances associated with the icon. Events \u00b6 selected \u00b6 icon . selected : Connect ( function () print ( \"The icon was selected (either via localscript or the user)\" ) end ) deselected \u00b6 icon . deselected : Connect ( function () print ( \"The icon was deselected (either via localscript or the user)\" ) end ) toggled \u00b6 icon . toggled : Connect ( function ( isSelected ) print (( \"The icon was %s (either via localscript or the user)\" ): format ( icon : getToggleState ( isSelected ))) end ) userSelected \u00b6 icon . userSelected : Connect ( function () print ( \"The icon was selected (solely by the user)\" ) end ) userDeselected \u00b6 icon . userDeselected : Connect ( function () print ( \"The icon was deselected (solely by the user)\" ) end ) userToggled \u00b6 icon . userToggled : Connect ( function ( isSelected ) print (( \"The icon was %s (solely by the user)\" ): format ( icon : getToggleState ( isSelected ))) end ) hoverStarted \u00b6 icon . hoverStarted : Connect ( function () print ( \"A mouse, finger or controller selection is hovering over the icon\" ) end ) hoverEnded \u00b6 icon . hoverEnded : Connect ( function () print ( \"The item is no longer hovering over the icon\" ) end ) dropdownOpened \u00b6 icon . dropdownOpened : Connect ( function () print ( \"The dropdown was opened\" ) end ) dropdownClosed \u00b6 icon . dropdownClosed : Connect ( function () print ( \"The dropdown was closed\" ) end ) menuOpened \u00b6 icon . menuOpened : Connect ( function () print ( \"The menu was opened\" ) end ) menuClosed \u00b6 icon . menuClosed : Connect ( function () print ( \"The menu was closed\" ) end ) notified \u00b6 icon . notified : Connect ( function () print ( \"New notice\" ) end ) Properties \u00b6 deselectWhenOtherIconSelected \u00b6 local bool = icon . deselectWhenOtherIconSelected --[default: 'true'] A bool deciding whether the icon will be deselected when another icon is selected. Defaults to true . This property can be updated either by doing icon:autoDeselect(bool) or icon:setProperty(\"deselectWhenOtherIconSelected\", bool) . accountForWhenDisabled \u00b6 local bool = icon . accountForWhenDisabled --[default: 'false'] A bool deciding whether to continue accounting for and updating the icons position on the topbar when disabled name \u00b6 {read-only} local string = icon . name --[default: '\"Unnamed Icon\"'] isSelected \u00b6 {read-only} local bool = icon . isSelected enabled \u00b6 {read-only} local bool = icon . enabled hovering \u00b6 {read-only} local bool = icon . hovering tipText \u00b6 {read-only} local stringOrNil = icon . tipText captionText \u00b6 {read-only} local stringOrNil = icon . captionText totalNotices \u00b6 {read-only} local int = icon . totalNotices dropdownIcons \u00b6 {read-only} local arrayOfIcons = icon . dropdownIcons menuIcons \u00b6 {read-only} local arrayOfIcons = icon . menuIcons dropdownOpen \u00b6 {read-only} local bool = icon . dropdownOpen menuOpen \u00b6 {read-only} local bool = icon . menuOpen locked \u00b6 {read-only} local bool = icon . locked topPadding \u00b6 {read-only} local udim = icon . topPadding targetPosition \u00b6 {read-only} local udim2 = icon . targetPosition The position the icon is at or aims to move to.","title":"API"},{"location":"api/#functions","text":"","title":"Functions"},{"location":"api/#new","text":"local icon = Icon . new () Constructs an empty 32x32 icon on the topbar.","title":"new"},{"location":"api/#constructors","text":"","title":"Constructors"},{"location":"api/#new_1","text":"local icon = Icon . new () Constructs an empty 32x32 icon on the topbar.","title":"new"},{"location":"api/#methods","text":"","title":"Methods"},{"location":"api/#set","text":"{chainable} icon : set ( settingName , value , iconState ) Applies a specific setting to an icon. All settings can be found here . If the setting falls under the 'toggleable' category then an iconState can be specified. For most scenarious it's recommended instead to apply settings using themes .","title":"set"},{"location":"api/#get","text":"local value = icon : get ( settingName , iconState ) Retrieves the given settings value. If the setting falls under the 'toggleable' category then an iconState can be specified.","title":"get"},{"location":"api/#gettogglestate","text":"local selectedOrDeselectedString = icon : getToggleState () Returns the current toggleState, either \"deselected\" or \"selected\".","title":"getToggleState"},{"location":"api/#settheme","text":"{chainable} icon : setTheme ( theme ) Applies a theme to the given icon. See themes for more information.","title":"setTheme"},{"location":"api/#setenabled","text":"{chainable} icon : setEnabled ( bool ) When set to false , the icon will be disabled and hidden.","title":"setEnabled"},{"location":"api/#setname","text":"{chainable} icon : setName ( string ) Associates the given name to the icon which enables it to be retrieved with IconController.getIcon(name) .","title":"setName"},{"location":"api/#setproperty","text":"{chainable} icon : setProperty ( propertyName , value ) An alternative way of doing zone[propertyName] = value . This enables the easy-configuration of icon properties within chained methods.","title":"setProperty"},{"location":"api/#select","text":"{chainable} icon : select () Selects the icon (as if it were clicked once).","title":"select"},{"location":"api/#deselect","text":"{chainable} icon : deselect () Deselects the icon (as if it were clicked, then clicked again).","title":"deselect"},{"location":"api/#notify","text":"{chainable} icon : notify ( clearNoticeEvent ) Prompts a notice bubble which accumulates the further it is prompted. If the icon belongs to a dropdown or menu, then the notice will appear on the parent icon when the parent icon is deselected.","title":"notify"},{"location":"api/#clearnotices","text":"{chainable} icon : clearNotices ()","title":"clearNotices"},{"location":"api/#disablestateoverlay","text":"{chainable} icon : disableStateOverlay ( bool ) When set to true , disables the shade effect which appears when the icon is pressed and released.","title":"disableStateOverlay"},{"location":"api/#convertlabeltonumberspinner","text":"{chainable} icon : convertLabelToNumberSpinner ( numberSpinner ) Takes a NumberSpinner object (by boatbomber) and converts it into the icons label. Example usage: Icon . new () : setName ( \"CashSpinnerIcon\" ) : setRight () : lock () : setSize ( 100 , 32 ) : give ( function ( icon ) local NumberSpinner = require ( replicatedStorage . NumberSpinner ) local labelSpinner = NumberSpinner . new () icon : convertLabelToNumberSpinner ( labelSpinner ) labelSpinner . Name = \"LabelSpinner\" labelSpinner . Decimals = 3 labelSpinner . Duration = 0.25 coroutine.wrap ( function () while wait ( 0.5 ) do labelSpinner . Value = math.random ( 100000 ) / 1000 end end )() end )","title":"convertLabelToNumberSpinner"},{"location":"api/#setimage","text":"{chainable} {toggleable} icon : setImage ( imageId , iconState ) Applies an image to the icon based on the given imaageId . imageId can be an assetId or a complete asset string.","title":"setImage"},{"location":"api/#setlabel","text":"{chainable} {toggleable} icon : setLabel ( text , iconState )","title":"setLabel"},{"location":"api/#setorder","text":"{chainable} {toggleable} icon : setOrder ( order , iconState )","title":"setOrder"},{"location":"api/#setcornerradius","text":"{chainable} {toggleable} icon : setCornerRadius ( scale , offset , iconState )","title":"setCornerRadius"},{"location":"api/#setleft","text":"{chainable} {toggleable} icon : setLeft ( iconState )","title":"setLeft"},{"location":"api/#setmid","text":"{chainable} {toggleable} icon : setMid ( iconState )","title":"setMid"},{"location":"api/#setright","text":"{chainable} {toggleable} icon : setRight ( iconState )","title":"setRight"},{"location":"api/#setimageyscale","text":"{chainable} {toggleable} icon : setImageYScale ( YScale , iconState ) Defines the proportional space the icons image takes up within the icons container.","title":"setImageYScale"},{"location":"api/#setimageratio","text":"{chainable} {toggleable} icon : setImageRatio ( ratio , iconState ) Defines the x:y ratio dimensions as a number. By default ratio is 1.00 .","title":"setImageRatio"},{"location":"api/#setlabelyscale","text":"{chainable} {toggleable} icon : setLabelYScale ( YScale , iconState ) Defines how large label text appears.By default YScale is 0.45 .","title":"setLabelYScale"},{"location":"api/#setbasezindex","text":"{chainable} {toggleable} icon : setBaseZIndex ( ZIndex , iconState ) Calculates the difference between the existing baseZIndex (i.e. instances.iconContainer.ZIndex ) and new value, then updates the ZIndex of all objects within the icon accoridngly using this difference.","title":"setBaseZIndex"},{"location":"api/#setsize","text":"{chainable} {toggleable} icon : setSize ( XOffset , YOffset , iconState ) Determines the icons container size. By default XOffset and YOffset are 32 .","title":"setSize"},{"location":"api/#setxsize","text":"{chainable} {toggleable} icon : setXSize ( XOffset , iconState ) Same as icon:setSize except only for the X Offset (the Y offset is generated automatically).","title":"setXSize"},{"location":"api/#setysize","text":"{chainable} {toggleable} icon : setYSize ( XOffset , iconState ) Same as icon:setSize except only for the Y Offset (the X offset is generated automatically).","title":"setYSize"},{"location":"api/#bindtoggleitem","text":"{chainable} icon : bindToggleItem ( guiObjectOrLayerCollector ) Binds a GuiObject or LayerCollector to appear and disappeared when the icon is toggled.","title":"bindToggleItem"},{"location":"api/#unbindtoggleitem","text":"{chainable} icon : unbindToggleItem ( guiObjectOrLayerCollector ) Unbinds the given GuiObject or LayerCollector from the toggle.","title":"unbindToggleItem"},{"location":"api/#bindevent","text":"{chainable} icon : bindEvent ( iconEventName , eventFunction ) Connects to an icon event based upon the given iconEventName and call eventFunction with arguments (self, ...) when the event is triggered.","title":"bindEvent"},{"location":"api/#unbindevent","text":"{chainable} icon : unbindEvent ( iconEventName ) Unbinds the connection of the associated iconEventName .","title":"unbindEvent"},{"location":"api/#bindtogglekey","text":"{chainable} icon : bindToggleKey ( keyCodeEnum ) Binds a keycode which toggles the icon when pressed.","title":"bindToggleKey"},{"location":"api/#unbindtogglekey","text":"{chainable} icon : unbindToggleKey ( keyCodeEnum ) Unbinds the given keycode.","title":"unbindToggleKey"},{"location":"api/#call","text":"{chainable} icon : call ( func ) Calls the function as a separate coroutine with the first argument being the icon itself. This is useful when needing to extend the behaviour of an icon while remaining in the chain.","title":"call"},{"location":"api/#give","text":"{chainable} icon : give ( userdata ) Passes the given userdata to the Icons maid to be destroyed/disconnected on the icons destruction. If a function is passed, it will be executed right away with its self (the icon) being passed as the first argument. The return value is then given to the maid (instead of the function).","title":"give"},{"location":"api/#lock","text":"{chainable} icon : lock () Prevents the icon being toggled by user-input (such as clicking) however the icon can still be toggled via localscript using methods such as icon:select() .","title":"lock"},{"location":"api/#unlock","text":"{chainable} icon : unlock () Re-enables user-input to toggle the icon again.","title":"unlock"},{"location":"api/#debounce","text":"{chainable} {yields} icon : debounce ( seconds ) Locks the icon, yields for the given time, then unlocks the icon, effectively shorthand for icon:lock() task.wait(seconds) icon:unlock() . This is useful for applying cooldowns (to prevent an icon from being pressed again) after an icon has been selected or deselected.","title":"debounce"},{"location":"api/#autodeselect","text":"{chainable} icon : autoDeselect ( true ) When set to true (the default) the icon is deselected when another icon (with autoDeselect enabled) is pressed. Set to false to prevent the icon being deselected when another icon is selected (a useful behaviour in dropdowns). This is a shorthand alternative to doing icon:setProperty(\"deselectWhenOtherIconSelected\", true) .","title":"autoDeselect"},{"location":"api/#settoppadding","text":"{chainable} icon : setTopPadding ( offset , scale ) The gap between the top of the screen and the icon.","title":"setTopPadding"},{"location":"api/#settip","text":"{chainable} icon : setTip ( text ) Sets a tip. To remove, pass nil as text .","title":"setTip"},{"location":"api/#setcaption","text":"{chainable} icon : setCaption ( text ) Sets a caption. To remove, pass nil as text .","title":"setCaption"},{"location":"api/#join","text":"{chainable} icon : join ( parentIcon , featureName ) Parents the icon to the given parentIcon under the specified feature, either \"dropdown\" or \"menu\".","title":"join"},{"location":"api/#leave","text":"{chainable} icon : leave () Unparents an icon from a parentIcon if it belongs to a dropdown or menu.","title":"leave"},{"location":"api/#setdropdown","text":"{chainable} icon : setDropdown ( arrayOfIcons ) Creates a vertical dropdown based upon the given table array of icons . Pass an empty table {} to remove the dropdown. Dropdown settings can be configured using themes or the set method .","title":"setDropdown"},{"location":"api/#setmenu","text":"{chainable} icon : setMenu ( arrayOfIcons ) Creates a horizontal menu based upon the given table array of icons . Pass an empty table {} to remove the menu. Menu settings can be configured using themes or the set method .","title":"setMenu"},{"location":"api/#destroy","text":"{chainable} icon : destroy () Clears all connections and destroys all instances associated with the icon.","title":"destroy"},{"location":"api/#events","text":"","title":"Events"},{"location":"api/#selected","text":"icon . selected : Connect ( function () print ( \"The icon was selected (either via localscript or the user)\" ) end )","title":"selected"},{"location":"api/#deselected","text":"icon . deselected : Connect ( function () print ( \"The icon was deselected (either via localscript or the user)\" ) end )","title":"deselected"},{"location":"api/#toggled","text":"icon . toggled : Connect ( function ( isSelected ) print (( \"The icon was %s (either via localscript or the user)\" ): format ( icon : getToggleState ( isSelected ))) end )","title":"toggled"},{"location":"api/#userselected","text":"icon . userSelected : Connect ( function () print ( \"The icon was selected (solely by the user)\" ) end )","title":"userSelected"},{"location":"api/#userdeselected","text":"icon . userDeselected : Connect ( function () print ( \"The icon was deselected (solely by the user)\" ) end )","title":"userDeselected"},{"location":"api/#usertoggled","text":"icon . userToggled : Connect ( function ( isSelected ) print (( \"The icon was %s (solely by the user)\" ): format ( icon : getToggleState ( isSelected ))) end )","title":"userToggled"},{"location":"api/#hoverstarted","text":"icon . hoverStarted : Connect ( function () print ( \"A mouse, finger or controller selection is hovering over the icon\" ) end )","title":"hoverStarted"},{"location":"api/#hoverended","text":"icon . hoverEnded : Connect ( function () print ( \"The item is no longer hovering over the icon\" ) end )","title":"hoverEnded"},{"location":"api/#dropdownopened","text":"icon . dropdownOpened : Connect ( function () print ( \"The dropdown was opened\" ) end )","title":"dropdownOpened"},{"location":"api/#dropdownclosed","text":"icon . dropdownClosed : Connect ( function () print ( \"The dropdown was closed\" ) end )","title":"dropdownClosed"},{"location":"api/#menuopened","text":"icon . menuOpened : Connect ( function () print ( \"The menu was opened\" ) end )","title":"menuOpened"},{"location":"api/#menuclosed","text":"icon . menuClosed : Connect ( function () print ( \"The menu was closed\" ) end )","title":"menuClosed"},{"location":"api/#notified","text":"icon . notified : Connect ( function () print ( \"New notice\" ) end )","title":"notified"},{"location":"api/#properties","text":"","title":"Properties"},{"location":"api/#deselectwhenothericonselected","text":"local bool = icon . deselectWhenOtherIconSelected --[default: 'true'] A bool deciding whether the icon will be deselected when another icon is selected. Defaults to true . This property can be updated either by doing icon:autoDeselect(bool) or icon:setProperty(\"deselectWhenOtherIconSelected\", bool) .","title":"deselectWhenOtherIconSelected"},{"location":"api/#accountforwhendisabled","text":"local bool = icon . accountForWhenDisabled --[default: 'false'] A bool deciding whether to continue accounting for and updating the icons position on the topbar when disabled","title":"accountForWhenDisabled"},{"location":"api/#name","text":"{read-only} local string = icon . name --[default: '\"Unnamed Icon\"']","title":"name"},{"location":"api/#isselected","text":"{read-only} local bool = icon . isSelected","title":"isSelected"},{"location":"api/#enabled","text":"{read-only} local bool = icon . enabled","title":"enabled"},{"location":"api/#hovering","text":"{read-only} local bool = icon . hovering","title":"hovering"},{"location":"api/#tiptext","text":"{read-only} local stringOrNil = icon . tipText","title":"tipText"},{"location":"api/#captiontext","text":"{read-only} local stringOrNil = icon . captionText","title":"captionText"},{"location":"api/#totalnotices","text":"{read-only} local int = icon . totalNotices","title":"totalNotices"},{"location":"api/#dropdownicons","text":"{read-only} local arrayOfIcons = icon . dropdownIcons","title":"dropdownIcons"},{"location":"api/#menuicons","text":"{read-only} local arrayOfIcons = icon . menuIcons","title":"menuIcons"},{"location":"api/#dropdownopen","text":"{read-only} local bool = icon . dropdownOpen","title":"dropdownOpen"},{"location":"api/#menuopen","text":"{read-only} local bool = icon . menuOpen","title":"menuOpen"},{"location":"api/#locked","text":"{read-only} local bool = icon . locked","title":"locked"},{"location":"api/#toppadding","text":"{read-only} local udim = icon . topPadding","title":"topPadding"},{"location":"api/#targetposition","text":"{read-only} local udim2 = icon . targetPosition The position the icon is at or aims to move to.","title":"targetPosition"},{"location":"contributing/","text":"Bug Reports \u00b6 To submit a bug report, open an issue or create a response at the discussion thread . Ensure your report includes a detailed explanation of the problem with any relavent images, videos, etc (such as console errors). Aim to include a link to a stipped-down uncopylocked Roblox place which reproduces the bug. Questions and Feedback \u00b6 Be sure to check out the documentation and resources first before asking a question. We recommend asking all questions and posting feedback to the discussion thread . Submitting a resource (video tutorial, port, etc) \u00b6 Fancy making a tutorial or resource for TopbarPlus? Feel free to get in touch and we can provide tips, best practices, etc. We'll feature approved resources on the resources page and often the discussion thread . To submit a resource, open an issue , or reach out on the discussion thread or to ForeverHD on the devforum . Suggestions and Code \u00b6 TopbarPlus is completely free and open source; any suggestions and code contributions are greatly appreciated! To make a suggestion, open an issue or create a response at the discussion thread . For large contributions (like a new feature) please open an issue before beginning a code contribution to ensure it's discussed through fully (we wouldn't want to waste your time!). For smaller contributions (a few lines of code, fixing typos, etc) feel free to send a pull request right away. Make sure to merge your pull requests into the #development branch. Some tools you'll find useful when working on this project: Rojo Material for MKDocs Roblox LSP Documentation \u00b6 If you find any problems in the documentation, including typos, bad grammar, misleading phrasing, or missing content, feel free to file issues and pull requests to fix them. To test documentation: Install Python (which comes with pip). Install Material for MKDocs . Visit the TopbarPlus repository . Click Fork in the top right corner. Clone this fork into your local repository. Change directory to this clone cd TopbarPlus . Swap to the development branch git checkout development . Call mkdocs serve within your terminal. Open your local website (it will look something like http://0.0.0.0:8000 ) Any changes to mkdocs.yml or the files within docs will now update live to this local site. Important All pull requests must be made to the development branch.","title":"Contributing"},{"location":"contributing/#bug-reports","text":"To submit a bug report, open an issue or create a response at the discussion thread . Ensure your report includes a detailed explanation of the problem with any relavent images, videos, etc (such as console errors). Aim to include a link to a stipped-down uncopylocked Roblox place which reproduces the bug.","title":"Bug Reports"},{"location":"contributing/#questions-and-feedback","text":"Be sure to check out the documentation and resources first before asking a question. We recommend asking all questions and posting feedback to the discussion thread .","title":"Questions and Feedback"},{"location":"contributing/#submitting-a-resource-video-tutorial-port-etc","text":"Fancy making a tutorial or resource for TopbarPlus? Feel free to get in touch and we can provide tips, best practices, etc. We'll feature approved resources on the resources page and often the discussion thread . To submit a resource, open an issue , or reach out on the discussion thread or to ForeverHD on the devforum .","title":"Submitting a resource (video tutorial, port, etc)"},{"location":"contributing/#suggestions-and-code","text":"TopbarPlus is completely free and open source; any suggestions and code contributions are greatly appreciated! To make a suggestion, open an issue or create a response at the discussion thread . For large contributions (like a new feature) please open an issue before beginning a code contribution to ensure it's discussed through fully (we wouldn't want to waste your time!). For smaller contributions (a few lines of code, fixing typos, etc) feel free to send a pull request right away. Make sure to merge your pull requests into the #development branch. Some tools you'll find useful when working on this project: Rojo Material for MKDocs Roblox LSP","title":"Suggestions and Code"},{"location":"contributing/#documentation","text":"If you find any problems in the documentation, including typos, bad grammar, misleading phrasing, or missing content, feel free to file issues and pull requests to fix them. To test documentation: Install Python (which comes with pip). Install Material for MKDocs . Visit the TopbarPlus repository . Click Fork in the top right corner. Clone this fork into your local repository. Change directory to this clone cd TopbarPlus . Swap to the development branch git checkout development . Call mkdocs serve within your terminal. Open your local website (it will look something like http://0.0.0.0:8000 ) Any changes to mkdocs.yml or the files within docs will now update live to this local site. Important All pull requests must be made to the development branch.","title":"Documentation"},{"location":"features/","text":"Images \u00b6 Icon . new : setImage ( shopImageId ) Labels \u00b6 icon : setLabel ( \"Shop\" ) icon : setImage ( shopImageId ) icon : setLabel ( \"Shop\" ) Alignments \u00b6 -- Aligns the icon to the left bounds of the screen -- This is the default behaviour so you do not need to do anything -- This was formerly called :setLeft() icon : align ( \"Left\" ) -- Aligns the icon in the middle of the screen -- This was formerly called :setMid() icon : align ( \"Center\" ) -- Aligns the icon to the right bounds of the screen -- This was formerly called :setRight() icon : align ( \"Right\" ) Notices \u00b6 icon : notify () Captions \u00b6 icon : setCaption ( \"Open Shop\" ) Dropdowns \u00b6 Dropdowns are vertical navigation frames that contain an array of icons: Icon . new () : setLabel ( \"Example\" ) : modifyTheme ({ \"Dropdown\" , \"MaxIcons\" , 3 }) : modifyChildTheme ({ \"Widget\" , \"MinimumWidth\" , 158 }) : setDropdown ({ Icon . new () : setLabel ( \"Category 1\" ) , Icon . new () : setLabel ( \"Category 2\" ) , Icon . new () : setLabel ( \"Category 3\" ) , Icon . new () : setLabel ( \"Category 4\" ) , }) Menus \u00b6 Menus are horizontal navigation frames that contain an array of icons: Icon . new () : setLabel ( \"Example\" ) : modifyTheme ({ \"Menu\" , \"MaxIcons\" , 2 }) : setMenu ({ Icon . new () : setLabel ( \"Item 1\" ) , Icon . new () : setLabel ( \"Item 2\" ) , Icon . new () : setLabel ( \"Item 3\" ) , Icon . new () : setLabel ( \"Item 4\" ) , }) Modify Theme \u00b6 You can modify the appearance of an icon doing: icon : modifyTheme ( modifications ) You can modify the appearance of all icons doing: Icon . modifyBaseTheme ( modifications ) modifications can be either a single array describing a change, or a colllection of these arrays. For example, both the following are valid: -- Single array icon : modifyTheme ({ \"IconLabel\" , \"TextSize\" , 16 }) -- Collection of arrays icon : modifyTheme ({ { \"Widget\" , \"MinimumWidth\" , 290 }, { \"IconCorners\" , \"CornerRadius\" , UDim . new ( 0 , 0 )} }) A modification array has 4 components: { name , property , value , iconState } `name (required) This can be: \"Widget\" (which is the icon container frame) The name of an instance within the widget such as IconGradient , IconSpot , Menu , etc A 'collective' - the value of an attribute called 'Collective' applied to some instances. This enables them to be acted upon all at once. For example, 'IconCorners'. property (required) This can be either: A property from the instance (Name, BackgroundColor3, Text, etc) Or if the property doesn't exist, an attribute of that property name will be set value (required) The value you want the property to become (\"Hello\", Color3.fromRGB(255, 100, 50) , etc) iconState (optional) This determines when the modification is applied. See the home page for more details on icon states. You can find example arrays under the 'Default' module: One Click Icons \u00b6 You can convert icons into single click icons (icons which instantly deselect when selected) by doing: icon : oneClick () For example: Icon . new () : setImage ( shopImageId ) : setLabel ( \"Shop\" ) : bindEvent ( \"deselected\" , function () shop . Visible = not shop . Visible end ) : oneClick () Toggle Items \u00b6 Binds a GuiObject (such as a frame) to appear or disappear when the icon is toggled icon : bindToggleItem ( shopFrame ) It is equivalent to doing: icon . deselected : Connect ( function () shopFrame . Visible = false end ) icon . selected : Connect ( function () shopFrame . Visible = true end ) Toggle Keys \u00b6 Binds a keycode which toggles the icon when pressed. Also creates a caption hint of that keycode binding. Icon . new () : setLabel ( \"Shop\" ) : bindToggleKey ( Enum . KeyCode . V ) : setCaption ( \"Open Shop\" ) Gamepad & Console Support \u00b6 TopbarPlus comes with inbuilt support for gamepads (such as XBbox and PlayStation controllers) and console screens: To highlight the last-selected icon (or left-most if none have been selected yet) users simply press DPadUp or navigate to the topbar via the virtual cursor. To change the default trigger keycode (from DPadUp) do: Icon . highlightKey = Enum . KeyCode . NEW_KEYCODE Overflows \u00b6 When accounting for device types and screen sizes, icons may occasionally overlap. This is especially common for phones when they enter portrait mode. TopbarPlus solves this with overflows: Overflows will appear when left-set or right-set icons exceed the boundary of the closest opposite-aligned icon or viewport. If a center-aligned icon exceeds the bounds of another icon, its alignment will be set to the alignment of the icon it exceeded: These examples and more can be tested, viewed and edited at the Playground .","title":"Features"},{"location":"features/#images","text":"Icon . new : setImage ( shopImageId )","title":"Images"},{"location":"features/#labels","text":"icon : setLabel ( \"Shop\" ) icon : setImage ( shopImageId ) icon : setLabel ( \"Shop\" )","title":"Labels"},{"location":"features/#alignments","text":"-- Aligns the icon to the left bounds of the screen -- This is the default behaviour so you do not need to do anything -- This was formerly called :setLeft() icon : align ( \"Left\" ) -- Aligns the icon in the middle of the screen -- This was formerly called :setMid() icon : align ( \"Center\" ) -- Aligns the icon to the right bounds of the screen -- This was formerly called :setRight() icon : align ( \"Right\" )","title":"Alignments"},{"location":"features/#notices","text":"icon : notify ()","title":"Notices"},{"location":"features/#captions","text":"icon : setCaption ( \"Open Shop\" )","title":"Captions"},{"location":"features/#dropdowns","text":"Dropdowns are vertical navigation frames that contain an array of icons: Icon . new () : setLabel ( \"Example\" ) : modifyTheme ({ \"Dropdown\" , \"MaxIcons\" , 3 }) : modifyChildTheme ({ \"Widget\" , \"MinimumWidth\" , 158 }) : setDropdown ({ Icon . new () : setLabel ( \"Category 1\" ) , Icon . new () : setLabel ( \"Category 2\" ) , Icon . new () : setLabel ( \"Category 3\" ) , Icon . new () : setLabel ( \"Category 4\" ) , })","title":"Dropdowns"},{"location":"features/#menus","text":"Menus are horizontal navigation frames that contain an array of icons: Icon . new () : setLabel ( \"Example\" ) : modifyTheme ({ \"Menu\" , \"MaxIcons\" , 2 }) : setMenu ({ Icon . new () : setLabel ( \"Item 1\" ) , Icon . new () : setLabel ( \"Item 2\" ) , Icon . new () : setLabel ( \"Item 3\" ) , Icon . new () : setLabel ( \"Item 4\" ) , })","title":"Menus"},{"location":"features/#modify-theme","text":"You can modify the appearance of an icon doing: icon : modifyTheme ( modifications ) You can modify the appearance of all icons doing: Icon . modifyBaseTheme ( modifications ) modifications can be either a single array describing a change, or a colllection of these arrays. For example, both the following are valid: -- Single array icon : modifyTheme ({ \"IconLabel\" , \"TextSize\" , 16 }) -- Collection of arrays icon : modifyTheme ({ { \"Widget\" , \"MinimumWidth\" , 290 }, { \"IconCorners\" , \"CornerRadius\" , UDim . new ( 0 , 0 )} }) A modification array has 4 components: { name , property , value , iconState } `name (required) This can be: \"Widget\" (which is the icon container frame) The name of an instance within the widget such as IconGradient , IconSpot , Menu , etc A 'collective' - the value of an attribute called 'Collective' applied to some instances. This enables them to be acted upon all at once. For example, 'IconCorners'. property (required) This can be either: A property from the instance (Name, BackgroundColor3, Text, etc) Or if the property doesn't exist, an attribute of that property name will be set value (required) The value you want the property to become (\"Hello\", Color3.fromRGB(255, 100, 50) , etc) iconState (optional) This determines when the modification is applied. See the home page for more details on icon states. You can find example arrays under the 'Default' module:","title":"Modify Theme"},{"location":"features/#one-click-icons","text":"You can convert icons into single click icons (icons which instantly deselect when selected) by doing: icon : oneClick () For example: Icon . new () : setImage ( shopImageId ) : setLabel ( \"Shop\" ) : bindEvent ( \"deselected\" , function () shop . Visible = not shop . Visible end ) : oneClick ()","title":"One Click Icons"},{"location":"features/#toggle-items","text":"Binds a GuiObject (such as a frame) to appear or disappear when the icon is toggled icon : bindToggleItem ( shopFrame ) It is equivalent to doing: icon . deselected : Connect ( function () shopFrame . Visible = false end ) icon . selected : Connect ( function () shopFrame . Visible = true end )","title":"Toggle Items"},{"location":"features/#toggle-keys","text":"Binds a keycode which toggles the icon when pressed. Also creates a caption hint of that keycode binding. Icon . new () : setLabel ( \"Shop\" ) : bindToggleKey ( Enum . KeyCode . V ) : setCaption ( \"Open Shop\" )","title":"Toggle Keys"},{"location":"features/#gamepad-console-support","text":"TopbarPlus comes with inbuilt support for gamepads (such as XBbox and PlayStation controllers) and console screens: To highlight the last-selected icon (or left-most if none have been selected yet) users simply press DPadUp or navigate to the topbar via the virtual cursor. To change the default trigger keycode (from DPadUp) do: Icon . highlightKey = Enum . KeyCode . NEW_KEYCODE","title":"Gamepad &amp; Console Support"},{"location":"features/#overflows","text":"When accounting for device types and screen sizes, icons may occasionally overlap. This is especially common for phones when they enter portrait mode. TopbarPlus solves this with overflows: Overflows will appear when left-set or right-set icons exceed the boundary of the closest opposite-aligned icon or viewport. If a center-aligned icon exceeds the bounds of another icon, its alignment will be set to the alignment of the icon it exceeded: These examples and more can be tested, viewed and edited at the Playground .","title":"Overflows"},{"location":"installation/","text":"Take the model (\ud83c\udf1fRecommended) \u00b6 Take the TopbarPlus model by Nanoblox. Open the toolbox and navigate to Inventory -> My Models. Click TopbarPlus to insert into your game and place anywhere within ReplicatedStorage . Method 2 - Download from Releases \u00b6 Visit the latest release . Under Assets , download TopbarPlus.rbxm . Within studio, navigate to MODEL -> Model and insert the file anywhere within ReplicatedStorage . Method 3 - With Rojo \u00b6 Setup with Rojo . Visit the TopbarPlus repository . Click Fork in the top right corner. Clone this fork into your local repository. Modify the default.project.json file to your desired location (by default TopbarPlus is built directly into ReplicatedStorage ). Call rojo serve (terminal or VSC plugin) and connect to the rojo studio plugin.","title":"Installation"},{"location":"installation/#take-the-model-recommended","text":"Take the TopbarPlus model by Nanoblox. Open the toolbox and navigate to Inventory -> My Models. Click TopbarPlus to insert into your game and place anywhere within ReplicatedStorage .","title":"Take the model (\ud83c\udf1fRecommended)"},{"location":"installation/#method-2-download-from-releases","text":"Visit the latest release . Under Assets , download TopbarPlus.rbxm . Within studio, navigate to MODEL -> Model and insert the file anywhere within ReplicatedStorage .","title":"Method 2 - Download from Releases"},{"location":"installation/#method-3-with-rojo","text":"Setup with Rojo . Visit the TopbarPlus repository . Click Fork in the top right corner. Clone this fork into your local repository. Modify the default.project.json file to your desired location (by default TopbarPlus is built directly into ReplicatedStorage ). Call rojo serve (terminal or VSC plugin) and connect to the rojo studio plugin.","title":"Method 3 - With Rojo"},{"location":"resources/","text":"Theme Settings Model Playground Discussion Repository Roblox-TS Port by grilme99 YouTube Video by Inctus If you would like to submit a resource (such as a video tutorial, port, etc), please see contributing .","title":"Resources"},{"location":"third_parties/","text":"TopbarPlus supports the use of multiple Icon packages within a single experience. It achieves this by assigning the first-required package as the 'lead' package, then whenever a second package is required (such as via the Icon module), the lead package modules are used instead. Without this errors would occur such as overlapping icons. You don't have to do anything for your third-party applications. Simply use TopbarPlus as normal.","title":"Third Parties"}]}